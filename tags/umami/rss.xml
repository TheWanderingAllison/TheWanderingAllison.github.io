<rss version="2.0"
    xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Umami on The Wandering Allison</title>
        <link>https://thewanderingallison.github.io/tags/umami/</link>
        <description>Recent content in Umami on The Wandering Allison</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-zh</language>
        <copyright>MIT</copyright>
        <lastBuildDate>Fri, 28 Jun 2024 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://thewanderingallison.github.io/tags/umami/rss.xml" rel="self" type="application/rss+xml" />
    
    
       
    <item>
<title>Notes| 绝佳时间</title>
<link>https://thewanderingallison.github.io/posts/notes_life-time/</link>
<pubDate>Sun, 16 Feb 2025 00:00:00 +0000</pubDate>
      
      <guid>https://thewanderingallison.github.io/posts/notes_life-time/</guid>
<description>
    

&lt;p&gt;整理笔记太累了，我放弃了……直接发摘抄吧！总结回头在阅读报告里写。&lt;/p&gt;
&lt;h2 id=&#34;第一章体内的昼夜节律什么是生物钟&#34;&gt;第一章体内的昼夜节律：什么是生物钟？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;生物钟基因激活，蛋白质合成，蛋白质相互作用形成复合体，蛋白质复合体进入细胞核，生物钟基因受到抑制，蛋白质复合体分解，生物钟基因重新激活，所有这些加起来就形成了以 24 小时为周期的节律。上述步骤中任何一个发生变化（基因突变）都会加快、减慢或破坏生物钟。正是这种突变使“Tau 蛋白突变仓鼠”拥有了 20 小时休息/活动周期，而不是 24 小时。包括你我在内，所有动物的分子级别生物钟都是以类似方式构建起来的。如果你再想一想，5.7 亿年前我们人类与果蝇拥有共同的祖先，就会更为进化的奇妙惊叹不已。5.7 亿年前，地球上每天有 22-23 个小时。这表明，我们的生物钟在过去几亿年中不得不放慢了几个小时。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;有趣的是，生物钟基因的细微差别（多态性）还与我们的生物钟类型（是“早晨型”“夜晚型”还是“中间型”）存在联系。早晨型，或者称为“早鸟型”的人，喜欢早睡早起，他们的生物钟似乎走得比较快，这是因为他们的一个或多个生物钟基因发生了变异。相较之下，夜晚型，或者称为“夜猫子型”的人，生物钟走得比较慢，他们更喜欢晚上熬夜，第二天睡懒觉。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;视交叉上核存在哺乳动物的“主生物钟”，但这并非唯一的生物钟。如今我们知道，在肝脏、肌肉、胰腺、脂肪组织，乃至所有身体器官和组织细胞中，都存在生物钟。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;无论是在一个器官之内，还是在胃与肝脏等器官之间，如果不同的生物钟失去协调性，也就是所谓的“内部失调”，都可能引起严重的健康问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;第二章穴居时代的遗存睡眠是什么我们为何需要睡眠&#34;&gt;第二章穴居时代的遗存：睡眠是什么？我们为何需要睡眠？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;精神分析学派创始人西格蒙德·弗洛伊德 (Sigmund Freud) 相信，梦代表现实中被压抑的愿望，研究梦是了解潜意识的途径。在弗洛伊德的时代，梦的解析在精神分析中起着关键作用。如今，梦在精神分析中的重要性已被大大贬低。核心问题在于，如果没有客观可靠的测量手段，所谓的“解梦”就纯属猜测。因此，伪科学从业者常常会用“解梦”大做文章。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;耐人寻味的是，除了栖息在北美洲、中美洲和南美洲的九带犰狳之外，人类研究过的所有哺乳动物都存在快速眼动期勃起现象，这毫无疑问证明了快速眼动期勃起极其常见。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;我在前面提到过，在快速眼动睡眠期间，我们做的梦最复杂，也最生动。在这个阶段，从中脑到脊髓的投射导致颈部以下失去肌肉张力（也称为“肌肉麻痹”）。有人认为，这是为了防止我们将梦境付诸行动。一种叫作“快速眼动睡眠行为障碍”(RBD) 的病症佐证了这一观点，这种睡眠障碍表现为患者在快速眼动睡眠期间不出现肌肉麻痹，或极少出现肌肉麻痹。我将在后面详细讨论这个问题。不过，快速眼动睡眠行为障碍是未来罹患帕金森病 (PD) 的征兆。有严重快速眼动睡眠行为障碍的患者可能会在睡梦中手脚乱晃，也可能会说梦话或大喊大叫，甚至出现暴力行为。不幸的是，往往要等到枕边人因此受到伤害，当事人才会针对这一病症采取措施。英国媒体大肆报道过一起著名案例，“正直忠诚”的丈夫布莱恩·托马斯 (Brian Thomas) 在度假期间勒死了妻子。他在梦中攻击了闯入者，但不幸的是，那个人在现实中是他妻子。英国皇家检控署认定他无法控制自己的行为，勒令斯旺西刑事法庭的陪审团宣布托马斯无罪。托马斯先生只记得自己梦见了有人闯进家里。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;动物研究显示，清醒时大脑中的腺苷水平会不断上升，浓度到达一定水平后触发睡眠。茶和咖啡中的咖啡因之所以有助于保持清醒和警觉，是因为咖啡因的作用是阻断大脑内的腺苷受体检测到腺苷。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;有些人并不分泌褪黑素，尤其是四肢瘫痪的人。视交叉上核到松果体的神经通路调节褪黑素的分泌，这条神经通路穿过颈部脊髓。四肢瘫痪者的这条神经通路被切断，阻断了松果体分泌褪黑素。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;总的来说，动物体形越大，睡眠时间越短。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;第三章眼睛的力量节律同步与晨昏周期&#34;&gt;第三章眼睛的力量：节律同步与晨昏周期&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;2002 年发表的一项研究显示，美国大学生普遍存在根深蒂固的误解，认为视觉过程涉及眼睛发出光，这与柏拉图的发射论一致。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;最后，他们对大鼠的研究和我们对小鼠的研究显示，有一小部分视网膜神经节细胞会对光做出直接反应。我们将这些新型感光细胞称为“光敏视网膜神经节细胞”，简称 pRGC。随后，我们的研究小组和世界各地的其他研究小组开展了一系列实验，证明每 100 个神经节细胞中就有一个是光敏视网膜神经节细胞。它们在眼睛里结成了一张“光敏网”，捕捉从四面八方射来的光，测量总体环境亮度。但进一步的研究工作显示，光敏视网膜神经节细胞的光敏特性基于一种新发现的对蓝光敏感的分子（感光色素），这种分子被称为“黑视蛋白”，简称 OPN 4。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;通过若干关键实验，我们的团队证明了黑视蛋白和光敏视网膜神经节细胞对蓝光最敏感，所有动物（包括人类）都是如此。但为什么会这样？答案似乎与它们的作用——检测黎明/黄昏的光线——有关。在白昼，自然光横跨整个可见光光谱（从紫光到红光）。但随着太阳落山，红日消失在地平线之下，不同颜色（波长）的光遇到大气中的微粒后发生散射，导致地平线附近黄光和红光偏多，而整个天穹蓝光偏多。黄昏时，大气中的微粒就像一面棱镜，将不同波长的光分开。黎明时也会出现同样的现象。太阳从地平线升起时，蓝光被散射后布满天穹，红光和橙光则多在地平线附近。我们认为，光敏视网膜神经节细胞之所以对蓝光最敏感，是因为黎明和黄昏时分天空中主要是蓝光。这使光敏视网膜神经节细胞成了理想的黎明/黄昏“检测器”。事实与假设基本相符，但我们还不能百分之百确定。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在黄昏和傍晚接受光照会导致视交叉上核的生物钟延迟，使我们晚睡晚起。相比之下，清晨接受光照则会带来相反的效果，导致生物钟提前，使我们早睡早起。正午接受光照对生物钟影响很小，有些研究人员甚至认为根本不起作用。显然，同步生物钟最重要的因素是黎明和黄昏的光照。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;归根结底，睡前至少 30 分钟内不该使用电子设备——不是因为它们发出的光，而是因为它们会提升大脑的警觉性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在针对年轻人进行的实验室研究中，受试者在晚上接受 50-100 勒克斯的光照超过 2 小时，其生物钟会发生小而显著的变化。受试者接受超过 1000 勒克斯的光照超过 2 小时，其生物钟会发生重大变化。这些发现能否推广到“现实世界”，以及它们如何适用于不同年龄组，目前仍是未知数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;如今学界的共识是，晚上的家用灯光可能会对我们的昼夜节律同步产生一些影响，起到推迟生物钟的作用，使我们晚睡，第二天晚起。因此，睡前几小时内保持较低的光照强度（低于 100 勒克斯）是有意义的。这么做还有一个好处，那就是能降低警觉性，为入睡做好准备。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;第五章生理混沌睡眠及昼夜节律紊乱的形成&#34;&gt;第五章生理混沌：睡眠及昼夜节律紊乱的形成&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;对成年人来说，阻塞性睡眠呼吸暂停的常见原因是肥胖。也有证据表明，随着年龄的增长，我们的舌头会积聚更多脂肪。这使得舌头变重，更容易后翻并压住呼吸道。酒精也会放松喉部肌肉，增加阻塞性睡眠呼吸暂停发作的风险。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然目前发作性睡病还无法治愈，但可以用莫达非尼等药物控制病情。这类药物属于处方药，用于提高白天的警觉性并减少白天嗜睡，效果非常显著。除了发作性睡病患者，希望“提高”警觉性的人也经常服用莫达非尼，它被称为“世界上第一款安全的健脑药”。目前尚不清楚短期或长期服用莫达非尼会有什么副作用，因此不建议为了提高警觉性而在网上购买这种药物。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在某些情况下，不安腿综合征是由潜在的健康问题引起的，例如缺铁。研究证明，在某些情况下，服用各类补铁的保健品有助于减轻病情。肾衰竭也可能引起不安腿综合征。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;第六章回归节律睡眠及昼夜节律紊乱的解决方案&#34;&gt;第六章回归节律：睡眠及昼夜节律紊乱的解决方案&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;大多数人都应该尽可能多地接受清晨的自然光照。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;北美、北欧和说英语的国家大多接受以下观点：午后一两个小时的午睡是不合时宜的，无法纳入现代工作日程表。我似乎感觉到了一丝清教徒的卑劣气息……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;锻炼与睡眠的关系相当复杂，但总的来说，锻炼对睡眠有好处。对我们大多数人来说，某种形式的锻炼，尤其是清晨在室外自然光下锻炼，有助于校准睡眠/觉醒时间和减少失眠，这或许是因为锻炼与光照相结合起到了改善睡眠状况和调节睡眠/觉醒时间的作用。不过，在临睡前 1-2 小时内锻炼可能会引起问题。机体从清醒过渡到睡眠的过程中，核心体温需要小幅下降。中等强度或剧烈的运动可能会颠覆这种受昼夜节律驱动的体温变化，导致一些人入睡时间延迟（但并非所有人都如此）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;简而言之，研究证明，夜间进食会提升体重增加的风险，并使人更容易出现 2 型糖尿病等代谢问题。正如第五章提过的，体重增加还会引起阻塞性睡眠呼吸暂停和相关问题。此外，消化过程在临睡前会放缓，所以一天中的正餐如果安排在睡前，就会导致消化系统出现健康问题，例如胃酸过多，使人更容易罹患消化性溃疡。消化性溃疡引起的胃痛会扰乱睡眠，而睡眠及昼夜节律紊乱又会提升罹患消化性溃疡的风险，这是一个恶性循环。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;不过，睡前请避免讨论或思考让人焦虑的话题，这一点真的很重要。皮质醇和肾上腺素飙升会提高警觉性，导致睡眠时间延迟（见第四章）。请尽量避免讨论个人财务问题或新闻报道中的悲惨话题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;第九章被遗忘的时光时间对认知情绪和精神疾病的影响&#34;&gt;第九章被遗忘的时光：时间对认知、情绪和精神疾病的影响&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;首先要说明的是，我们的整体认知能力（可以用一大堆不同的测试加以评估）在一天 24 小时内存在明显变化。这种每日变化取决于昼夜节律系统、睡眠时型、睡眠需求与年龄等因素之间的相互作用。这些因素各自发挥了什么作用通常很难区分，但最终结果是确切无疑的：大多数成年人的认知能力在醒来后迅速提升，在中午前后达到高峰（见图 6）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;平均来看，成人的认知能力从醒来后急剧上升，到中午前后达到顶峰，青少年的认知能力则在下午达到顶峰。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;记忆分三个阶段：第一阶段是编码，即获取信息后形成新记忆，但这种记忆很容易被遗忘；第二阶段是巩固，也就是新记忆逐渐“沉淀”为稳定的长期记忆；第三阶段是检索，也就是回忆起巩固后的记忆。巩固后的记忆称为长期记忆，分为两类。第一类是陈述性记忆，指受意识控制的记忆，可以作为事实和概念被回忆起来。它们通常被称为“常识”，例如了解猫狗的区别，或者知道歌剧《尼伯龙根的指环》(Der Ring des Nibelungen) 的作者是德国浪漫主义作曲家理查德·瓦格纳 (Richard Wagner)。第二类是程序性记忆，指与采取行动和发挥技能有关的记忆。简单来说就是关于如何做某事的记忆，例如骑自行车、系鞋带或烹饪惠灵顿牛排。陈述性记忆与程序性记忆的区别可能有些模糊，但这种区别不仅仅是语义层面上的。在睡眠过程中，两类不同记忆的编码方式似乎也不一样。多项研究表明，陈述性记忆与慢波睡眠有关，长期储存在大脑颞叶中；程序性记忆则与快速眼动睡眠有关，储存在小脑内（见图 2）。需要说明的是，快速眼动睡眠不仅与程序性记忆有关，还与情绪记忆有关，尤其是与创伤后应激障碍有关的记忆（见第六章）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;上述数据和其他研究数据显然都支持以下观点：睡眠不足会促进大脑获取和存储负面记忆，而不是正面记忆。也就是说，睡眠不足会使人更关注世间的负面信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;关键是，疲乏的大脑更倾向于记住负面经验而非正面经验，这意味着我们在做判断的过程中负面记忆会发挥更大的作用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;这强调了一个事实：熬夜不睡会极大损害任务学习能力，就连小睡或额外复习也无法弥补。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;第十章何时服药脑卒中心脏病头痛疼痛与癌症&#34;&gt;第十章何时服药：脑卒中、心脏病、头痛、疼痛与癌症&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;在一天中不同的时间，疾病的状态有所不同。人与人之间存在差异，各项科学研究的结论也没有达成一致。图中展示的是平均看来疾病与疾病严重程度最有可能出现的高峰期。退行性骨关节病引起的疼痛和关节僵硬会在傍晚达到高峰。湿疹与银屑病引起的强烈瘙痒会在夜间和午夜达到高峰，这会扰乱睡眠。到黎明时分，瘙痒会有所缓解。神经性疼痛（神经受损后的疼痛）会引起烧灼感或突发刺痛，在傍晚和清晨疼痛最为剧烈。蚊子叮咬（携带疟疾）因蚊子种类不同而异，但通常发生在夜间。这些蚊子的特点是在黄昏过后开始寻找人类受害者，在午夜前后叮咬率达到高峰。据估计，60%至 80%的叮咬发生在晚上 9 点至凌晨 3 点。牙痛在凌晨 3 点到 7 点达到高峰。癫痫发作的类型不同，高峰期也不同：额叶癫痫多发于早上 5 点到 7 点半，枕叶癫痫多发于下午 4 点到 7 点，颞叶癫痫多发于晚上 7 点到午夜。消化性溃疡穿孔指胃壁破裂，消化液漏进腹腔。破裂高峰期是下午 4 点到 5 点，上午 10 点到中午 12 点破裂概率较低，其次是晚上 10 点左右。老年人尿失禁（夜尿症）发生在夜间到凌晨。丛集性头痛大多在凌晨 2 点左右发作。痛风是尿酸结晶在大脚趾、脚踝、膝盖、手腕等关节处堆积引起的，疼痛在半夜 3 点到 4 点达到高峰。哮喘在凌晨 4 点左右症状最严重，哮喘导致猝死也大多发生在这一时段。这也取决于在卧室中接触到的触发哮喘的过敏原。人类出生主要发生在凌晨 1 点到 7 点，在凌晨 4 点到 5 点达到高峰。血管痉挛性心绞痛是一种心绞痛（胸痛），通常发生在清晨 6 点左右，患者感觉胸部好似收缩或紧缩。慢性阻塞性肺疾病包括慢性支气管炎和肺气肿，属于慢性炎症性肺部疾病，往往是大量吸烟引起的，会导致肺部气流受限，引起呼吸困难、咳嗽、痰多和气喘，症状在清晨最为严重。类风湿关节炎引起的疼痛在早晨达到高峰。过敏性鼻炎是由过敏原引起的鼻内炎症，过敏原包括花粉、灰尘、霉菌或某些动物的皮屑等。咳嗽和打喷嚏的频率在睡醒后的头几个小时达到高峰。脑膜炎是指围绕大脑和脊髓的保护膜（脑膜）受到感染，大多数死亡案例发生在上午 7 点到 11 点。睡眠时型不同的人偏头痛发作时间也存在差异：早晨型的人往往在上午出现偏头痛，夜晚型的人则在下午或晚上出现偏头痛。脑卒中在上午 6 点到中午达到高峰。心脏病发作与心源性猝死（例如脑卒中）一样，在上午 6 点到中午达到高峰。阿尔茨海默病的“日落综合征”症状包括亢奋、思维混乱、焦虑和充满攻击性，通常出现在傍晚和晚上，但也可能发生在夜间。自杀致死最常发生在中午前后。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;药物的疗效和服药时间与药物半衰期有关，个体之间也存在差异。之所以会出现这些差异，是因为身体代谢药物的方式并不是一成不变的。药物的药代动力学会在人体中悄然发生变化。随着年龄的增长，肾脏和肝脏的功能会发生变化，代谢药物的过程也进而改变。脂肪沉积物会吸收脂溶性药物，使其在体内的半衰期变长。此外，人体对药物的敏感度也会发生改变，尤其是在长期服用同一种药物的情况下。需要注意的是，每天服用半衰期长的药物，血药浓度会持续维持较高水平。服用药物并不是越多越好，恰恰相反，有些药物浓度较高反而会使疗效降低。此外，血药浓度过高还可能带来副作用，例如恶心、胃部不适、过敏（例如皮疹）等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;一份重要的文献综述涵盖了 31 项研究，涉及 11816 名脑卒中患者，所有亚型脑卒中的发作都有明显的时间效应。与一天中的其他时间相比，清晨 6 点到中午发生脑卒中的概率要高出 49%。脑梗死的概率为 55%，脑瘀血为 34%，短暂性脑缺血发作为 50%。研究心脏病发作的文献也有类似记录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;例如，用于治疗高血压的药物称为“降压药”，睡前服用降压药比早上服用更能有效调节血压，减少脑卒中和心脏病发作的风险。此外，睡前服用阿司匹林能抑制血小板凝结成不必要的血块，有助于预防心脏病和脑卒中发作。晚上服用阿司匹林能大大抑制次日早晨的血小板活化，早晨服用效果则大为减弱。迄今为止样本量最大的研究显示，与早上服药相比，睡前服用降压药有助于调节血压，使心脑血管疾病的死亡率几乎减半。这项研究值得详细谈一谈。实验涵盖了近 2 万名平均年龄为 60.5 岁的高血压患者，受试者的服药时间随机分为睡前和早晨醒来时，一次服用一种或多种降压药的当日全部剂量。实验持续了 6 年之久，研究人员对这些患者进行了跟踪调查，每年为其进行详细体检。实验结果显示，晚上服用降压药的患者死于心脑血管疾病（包括心力衰竭和脑卒中）的概率大大降低（几乎减半）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;第十一章昼夜节律军备竞赛免疫系统与疾病侵袭&#34;&gt;第十一章昼夜节律军备竞赛：免疫系统与疾病侵袭&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;我们现在知道，免疫反应的各个方面都受到昼夜节律系统的调节。皮肤是免疫系统中最重要但最容易被忽视的一道防线，它是一道非常严密的屏障，能防止致病微生物（包括病毒、细菌或其他病原体）等进入人体。在调节皮肤渗透能力方面，昼夜节律系统发挥着重要作用。皮肤的渗透能力在傍晚和夜间增强，在清晨和白天则减弱。这意味着皮肤在晚上会流失更多水分，即皮肤在傍晚和夜间变得干燥，因此皮肤瘙痒会加剧，湿疹和银屑病等疾病则会加重不适感（见图 8）。同时，细菌和病毒在晚上更有可能通过皮肤侵入人体——皮肤渗透能力增强，加上瘙痒的皮肤被抓挠至破损，病原体更容易进入人体。有趣的是，皮肤的血流量在夜间也会增加（还记得前面提过的热量流失吧），使血液的免疫防御功能可以第一时间发挥作用。这些还不是皮肤在一天中仅有的变化。皮肤表皮由死细胞组成，质地紧密，以便抵御入侵。研究发现，皮肤细胞增殖也存在每日节律。午夜前后，细胞增殖和旧皮肤脱落的速度最快，这会使附着在旧皮肤上的细菌随之脱落。假设你的皮肤被割伤或烧伤，白天造成的伤口愈合速度比晚上造成的伤口要快两倍多。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在生物钟的驱动下，巨噬细胞对外部攻击的敏感度在一天之中会有所变化。在机体处于清醒状态的白天，巨噬细胞的敏感度会提高。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在另一项研究中，研究人员给小鼠接种流感疫苗，一组小鼠在接种后立即被剥夺了 7 个小时的睡眠。结果显示，对照组小鼠的免疫接种可以预防感染，但睡眠不足的小鼠体内病毒迅速扩散。对人类来说也是如此。在一项研究中，两组人都接种了流感疫苗，但接种后睡眠安排不同，一组人每晚只能睡 4 小时，另一组人每晚照常睡 7.5-8.5 小时。结果显示，前者体内的流感病毒抗体比后者少一半。另一项研究表明，失眠可能使流感疫苗有效性降低。乙型肝炎疫苗和甲型肝炎疫苗接种者的免疫反应也呈现出类似的结果，睡眠不足的人免疫反应较弱。因此，除了在最佳时机接种疫苗，保持充足睡眠也能提高疫苗的有效性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;第十三章找到你的自然节律昼夜节律饮食与健康&#34;&gt;第十三章找到你的自然节律：昼夜节律、饮食与健康&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;在进化过程中，人类的饮食中很少有游离糖。精制糖经过中东传向西方，在 13 世纪抵达地中海。直到中世纪末（1500 年左右），糖都是珍稀昂贵之物，产于塞浦路斯岛、西西里岛和大西洋上的马德拉群岛。后来，葡萄牙人在巴西建立了甘蔗种植园，那些种植园全靠奴隶耕作。17 世纪 40 年代，加勒比海地区从巴西引进了甘蔗，引起了制糖业与奴隶贸易的爆发式增长。其他欧洲国家也积极参与制糖，驱使奴隶种植和收获甘蔗。据估计，在 19 世纪初三角贸易废除之前，有 1200 多万非洲人被贩卖至美洲。不过，奴隶制本身直到 1865 年美国南北战争结束后才或多或少走向终结。这种骇人听闻的死亡贸易助长了“蔗糖热潮”。那些不堪入目的不人道行为，仅仅是为了一种没人真的需要但人人渴求的物质。蔗糖贸易给现代世界打下了烙印——既留下了残酷可耻的遗产，也留下了糟糕的健康状况。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;目前出土的中世纪遗骸只有 20%有蛀牙，但 20 世纪的遗骸 90%以上有蛀牙。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2014 年发表的一项为期 15 年的研究显示，精制糖摄入热量占比 17%—21%的人死于心脑血管疾病的风险比相同指标占比 8%的人要高 38%。摄入糖分过多也会导致代谢综合征，所谓的代谢综合征包括高血压、炎症、体重增加、糖尿病和脂肪肝。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;拿富含糖分的甜食给一顿大餐收尾这种做法源于英国都铎时代。当时人们认为糖有助于消化，对胃有好处。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;最易消耗热量的最佳锻炼时间我们的运动能力和最佳表现在一天之中会发生变化。以人类和小鼠为对象的研究显示，肌肉力量和肌肉细胞氧化分解葡萄糖的能力在一天中不同的时间有所不同。一般来说，肌肉力量和肌肉细胞的呼吸作用会在下午和傍晚达到高峰。这就能解释为什么我们总是在下午和傍晚运动状态最佳。平均来看，肌肉力量与核心体温达到峰值的时间基本吻合，即通常出现在下午 4 点到 6 点（见图 1）。体温升高能起到提高代谢率、增加肌肉力量的作用。即使处在休息状态，我们在下午和傍晚消耗的热量也比清晨多 10%。而且一般来说，我们在下午或傍晚的运动状态比早上好。但这是通过锻炼消耗热量的最佳时机吗？其中存在两个变量。第一个变量是睡眠时型（见附录一）。一项针对运动员的有趣研究表明，睡眠时型对运动表现巅峰有显著影响。在一天之中，随着傍晚临近，早晨型、中间型和夜晚型的人表现都越来越好。不过，睡眠时型较晚的人在晚上表现尤其优异，他们在早上 7 点和晚上 10 点的运动表现差异高达 26%。第二个变量是身体的代谢状况。大多数人都适合在下午或傍晚锻炼，但有充分的证据表明，一部分人可能更适合早起空腹锻炼（可以喝水）。早餐前的晨练过程中，身体仍然以脂肪储备作为燃料，因此在这时锻炼可以燃烧更多脂肪。这是一个两难的抉择：早起锻炼能够燃烧储存的脂肪，但锻炼又和睡眠时型密不可分，你要等身体适应活动之后才能进行更多的剧烈运动。简单来说，如果睡眠时型促使你早睡早起，晨练对你更有吸引力也更容易做到，那么你就该在早餐前锻炼。但如果你属于晚睡晚起的夜晚型，早上锻炼对你来说很困难，那么你就最好制订下午或傍晚的常规锻炼计划。选择在下午或傍晚锻炼还有一个好处：避免受伤——因为肌肉已经“热身”完毕，不那么容易拉伤。我有一些同事意识到了这些问题，他们称自己试着每天晨练 20 分钟左右，然后在傍晚锻炼 30-40 分钟。我们在第六章讨论过，尽量不要在临睡前锻炼，因为这会提高核心体温，导致入睡时间延迟。此外，临睡前剧烈运动还会引起皮质醇飙升，激活应激中枢。临睡前皮质醇水平较高会让你更晚入睡（见第四章）。我最后一个建议是，晚餐后散步 30-45 分钟，而不是餐前，这有助于控制血糖，进而减轻体重。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;酒精对睡眠与抑郁症的影响远远不止改变核心体温。它还会干扰脑神经递质和激素的分泌，而这些神经递质和激素会直接改变睡眠结构和情绪。酒精会使大脑活动放缓，让人感到放松、困倦，但摄入过量会导致睡眠变差乃至失眠。酒精会使前半夜的快速眼动睡眠减少，改变慢波睡眠，降低睡眠质量，导致睡眠时间缩短，片段化睡眠增多。酒精还会使喉部肌肉放松，导致阻塞性睡眠呼吸暂停症状恶化。由于酒精会导致失眠，白天犯困往往会成为饮酒后的大问题。这还会形成恶性循环：白天饮用富含咖啡因的饮料以便保持清醒，晚上则以酒精作为镇静剂抵消那些刺激物的作用。这就是所谓的“镇静剂—刺激物反馈回路”。重点在于，睡眠及昼夜节律紊乱会使人容易罹患代谢综合征，摄入酒精会加剧代谢综合征，也会加剧睡眠及昼夜节律紊乱。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;我们现在知道，葡萄糖摄取与代谢受昼夜节律的驱动而变化，在一天中不同时间摄入同样的食物对血糖水平的影响迥异。对于每天在晚上摄入大部分热量的人来说，这种影响尤其重大。为了明确起见，我把“晚上”宽泛地定义为下午 6 点到睡前。晚上吃大餐的人出现葡萄糖不耐受、2 型糖尿病、体重增加和肥胖症的风险会大大增加。一项细致的研究对比了在不同时间摄入同样食物的两组人。研究人员将受试者分为两组，一组在一天中的早些时候摄入大部分热量，另一组在晚些时候（下午 6 点到睡前）摄入大部分热量，两组人的餐食相同，都是为期 20 周的减肥食谱。此外，两组人运动量相同，睡眠时间也相同。实验结果显示，与进食较早的一组相比，进食较晚的一组受试者体重减轻较少，减重速度也较慢。一项类似的研究显示，与晚上摄入热量相比，早上摄入热量不但能减掉更多体重，还能维持较为理想的血糖水平，减少葡萄糖不耐受和降低罹患 2 型糖尿病的风险。此外，晚上摄入高热量食物和不吃早饭（例如夜班工作者或商界人士）会引起肥胖症，仅仅不吃早饭则会导致葡萄糖不耐受进一步恶化。务必注意，同样的饭菜在晚上吃比在早上吃更容易升血糖。葡萄糖不耐受之所以容易在晚上出现，是因为晚上受昼夜节律驱动的胰岛素分泌减少，以及肝脏的胰岛素抵抗发生变化。严格受控的实验室研究已经证明，健康人的葡萄糖不耐受程度在一天中不断增加，导致晚上血糖更容易升高。&lt;/p&gt;
&lt;/blockquote&gt;

</description>

</item>
        
    <item>
<title>2024十二月读书记录（二）</title>
<link>https://thewanderingallison.github.io/posts/20241231_2/</link>
<pubDate>Thu, 13 Feb 2025 00:00:00 +0000</pubDate>
      
      <guid>https://thewanderingallison.github.io/posts/20241231_2/</guid>
<description>
    &lt;h3 id=&#34;鸟巢里的秘密&#34;&gt;鸟巢里的秘密&lt;/h3&gt;


&lt;p&gt;细致入微地描述了 32 种鸟类的家庭生活。非常好看！而且有康奈尔实验室的众多照片作为佐证，可以一窥日常生活中极难见到的鸟类产卵、育雏行为。鸟类繁殖的各个阶段也介绍地非常详细，知识量大但毫不晦涩。唯一缺点可能是全是北美鸟类，我几乎都是见不着的。&lt;/p&gt;
&lt;p&gt;有时就是这么玄妙，读的时候就觉得这本书的气质和其他很多观鸟书不太一样，后面留意到文章、摄影以及译者全是女性。翻译除了有一处把晚成鸟类误翻成早成鸟类，其他都很靠谱。&lt;/p&gt;
&lt;p&gt;再举一个例子说明这本书多好看，那就是我读完后再翻开久负盛名的西布利的《何以为鸟》，顿时觉得也不过如此嘛！&lt;/p&gt;
&lt;p&gt;可以在出版社网站进行&lt;a href=&#34;https://wqbook.wqxuetang.com/deep/read/pdf?bid=3218095&#34;&gt;试阅&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;dinosaur-philosophy&#34;&gt;Dinosaur Philosophy&lt;/h3&gt;


&lt;p&gt;&lt;img src=&#34;https://misty-limit-424f.allison-00c.workers.dev/2025/02/0d702ca34e61667ab3d8606f048924ac.webp&#34; alt=&#34; Dinosaur Philosophy 01|300&#34;&gt;
&lt;img src=&#34;https://misty-limit-424f.allison-00c.workers.dev/2025/02/5c29c78e6b052009b554bd9d1f8e246d.webp&#34; alt=&#34;Dinosaur Philosophy 02|300&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://misty-limit-424f.allison-00c.workers.dev/2025/02/20c23d5407c1155d237dd9c5c711932c.webp&#34; alt=&#34;Dinosaur Philosophy 03|300&#34;&gt;
&lt;img src=&#34;https://misty-limit-424f.allison-00c.workers.dev/2025/02/67e32ab3869218b32c1ba1f51766446f.webp&#34; alt=&#34;Dinosaur Philosophy 04|300&#34;&gt;&lt;/p&gt;
&lt;p&gt;截几张图感受下风格。都是这种丧丧的鸡汤，中箭无数。&lt;/p&gt;
&lt;p&gt;用经典哲学问题作为每章标题，比如 &lt;em&gt;metaphysics：do I exist?&lt;/em&gt;、&lt;em&gt;epistemology：what do I know?&lt;/em&gt; 等等，轻松好翻的同时也学了点新词汇。&lt;/p&gt;
&lt;h3 id=&#34;before--after&#34;&gt;Before &amp;amp; After&lt;/h3&gt;


&lt;p&gt;定格画，找不同。&lt;/p&gt;
&lt;p&gt;之前读了好几本这位绘本作者的书，很显然她本身就是细致的自然观察者，并且不会局限在某一处，而是全局地、从整体生态角度来描绘。这本绘本像是架好相机，在不同时间同一个地点按下快门。可能是数秒，也可能是季度甚至年度。在前后两幅画里可以看到时间的流逝会带来怎样的变化。&lt;/p&gt;
&lt;p&gt;同时，取景可以是再普通不过的城市校园，也可以是一片草地、一个池塘，还可以是珊瑚礁、热带雨林、北美湿地。而只要你愿意带上探索的眼睛，任何地方都有观察的趣味，去发现无数世界。&lt;/p&gt;
&lt;h3 id=&#34;找出口的人&#34;&gt;找出口的人&lt;/h3&gt;


&lt;p&gt;一本抑郁症经历者的自传体漫画。&lt;/p&gt;
&lt;p&gt;理智告诉我去理解，情感却诚实地说：不，我无法共情。&lt;/p&gt;
&lt;p&gt;我想这不仅仅是我的问题。抑郁的人可能看上去拥有“完美”的人生，我理解这一点。但是作为出版物想触及读者，不能只是叫着“我很痛苦”、“我被困住了”而没有更多深层的东西，起码我读完毫无触动。&lt;/p&gt;
&lt;p&gt;还有我的奇怪关注点：为什么出门必须要涂指甲油？甚至在抑郁状态极差的情况下出门手脚都还有那么明显的红色指甲油！我真讨厌欧美这种隐性要求。以及为什么要把丈夫翻成老公？这很愚蠢！&lt;/p&gt;
&lt;p&gt;也不是说这本书很糟糕，但我只能获得一些“事实”上的东西，感受不到情感联结，不知道其他人感触如何。&lt;/p&gt;
&lt;p&gt;唯一想摘录的就是这段：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;心理治疗师的主要任务是为情绪大脑进行重新编程，使其更好地适应当下，而不是继续对过去的情况作出反应。为了达到这个目的，跳过身体去直接影响情感大脑的做法往往更有效，而语言和理性分析则难以对情感大脑产生影响。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另外找到可靠的心理医生原来在哪个国家都如此困难。别说真的能帮助来访者状态好起来，指望他们遵守基本的职业道德都是奢望，她看的第二个医生甚至涉嫌性骚扰，这真让人绝望。&lt;/p&gt;
&lt;h3 id=&#34;山之四季&#34;&gt;山之四季&lt;/h3&gt;


&lt;p&gt;日本山居笔记，还不错，平淡中自有真味，是一本可以让人平静下来的小书。&lt;/p&gt;
&lt;p&gt;读的时候就感觉到行文中避世和苦修的倾向，最后读到附录里的作者小传才明白这原来不是我的错觉。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;迷惘中的他为日本侵略战争的狂热所感染，创作了一批歌颂非正义战争的诗歌作品，以此弥补空虚。&lt;/p&gt;
&lt;p&gt;一九四五年，日本战败投降，高村光太郎受到巨大震撼，对自己过去的愚蠢做出深刻反省。他选择的赎罪方式是进行自我放逐，选择孤身一人来到日本东北部地区岩手县的山间，开始隐居生活。这部《山之四季》正是这七年时光的记录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;最后的同类&#34;&gt;最后的同类&lt;/h3&gt;


&lt;blockquote&gt;
&lt;p&gt;如何对待动物，就是如何对待我们自己。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在泪水和心碎中结束了全书。是完美的吗？不是，尤其对于主角的家庭刻画我仍持保留态度，但他和最后的大海雀“旺旺”之间的羁绊已牵动我全部心神，无暇他顾。&lt;/p&gt;
&lt;p&gt;在开始阅读前就已经知晓那最后的结局——大海雀早就灭绝了，可即便如此我还是全程揪紧心口。等到最后的告别，我已经完全被攫住心神。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;遇到海雀以来，这是旺旺第一次亲近古斯。古斯抚摸着旺旺，旺旺的脖子环绕着古斯的手，他的手搂着它，它咕咕叫着：低沉的发音带动了胸膛的起伏，古斯唱了一首摇篮曲，曲调低沉、忧伤、舒缓而肃穆。这是他在法罗群岛学会的摇篮曲。他以为自己已经忘记，但这曲调像极了企鹅的专属，传递着它们的话语。旺旺挣脱开来，古斯将手放回双膝上。企鹅仿佛在沐浴一般，慢慢地没入水中。它转向古斯，水漫到胸口。古斯愣住了，手不由自主地挥动，就像人类在离别时挥动手臂，互道再见，互相勉励。古斯在告诉旺旺，他懂，它应该离开。旺旺的目光从他身上移开，看向前方，继续往前走，留下一个背影。旺旺潜入水中，这一次，它再也没有回来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但我又忍不住迟疑，我们对灭绝物种的心痛和投射，何尝不是一种自以为是呢？就像作者虚构的这个最后一只大海雀和与它相伴的人类的故事，我们和动物之间真的可以互相理解吗？或许也就像上面写的，最终它们只是消失，再也没有回头。&lt;/p&gt;
&lt;p&gt;也忍不住要吐槽一句，英文世界，或者说，英国和美国，对它们之外的作者真是毫不关心啊。刷到中文书讯时书籍还没上市，想着说不定会有英译本可以先读读，毕竟法译英难度会比翻成中文小吧。结果几乎搜不到法语之外的信息。不过别说法语书了，连把英语作为官方语言的澳大利亚和加拿大，它们的书在英美都曝光率低得很。&lt;/p&gt;
&lt;h3 id=&#34;snow-friends&#34;&gt;Snow Friends&lt;/h3&gt;


&lt;p&gt;&lt;img src=&#34;https://misty-limit-424f.allison-00c.workers.dev/2025/01/185d64ba4ad183a44ec50dd73d82a8f1.webp&#34; alt=&#34;Snow Friend|600&#34;&gt;&lt;/p&gt;
&lt;p&gt;依然是图书馆 Libby 页面的季节推荐，今年冬天没见到雪，就看看绘本解馋吧！是两个小朋友以及两只小狗愉快玩耍的小故事。&lt;/p&gt;

</description>

</item>
        
    <item>
<title>2024十二月读书记录（一）</title>
<link>https://thewanderingallison.github.io/posts/20241231_1/</link>
<pubDate>Fri, 07 Feb 2025 00:00:00 +0000</pubDate>
      
      <guid>https://thewanderingallison.github.io/posts/20241231_1/</guid>
<description>
    &lt;h3 id=&#34;玻璃底片上的宇宙&#34;&gt;玻璃底片上的宇宙&lt;/h3&gt;


&lt;p&gt;讲述哈佛天文台百年来的故事。&lt;/p&gt;
&lt;p&gt;并没有绝对的人物主角，一开始会觉得写得太过杂乱，不过越往后越精彩，等到最后一章因为对各个人物都有了一定的熟悉度，以及终于见证女性被学术界、科学界认可的那一刻，我无法不感到心潮澎湃。可惜对天文知识的匮乏还是大为影响我的阅读体验，实在无法判断书中提到的各项研究重要性所在，只能大致有个概念。&lt;/p&gt;
&lt;p&gt;详细介绍可见出品方后浪的推文：&lt;a href=&#34;https://mp.weixin.qq.com/s/l17lOtNwr3MYq_d9I0P-Lg&#34;&gt;我看见生命宽阔且自由，一如宇宙中闪烁的浩繁星辰&lt;/a&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;the-very-last-leaf&#34;&gt;The Very Last Leaf&lt;/h3&gt;


&lt;p&gt;一个欢乐版本的“最后一片叶子”。把叶子生长的过程比喻成求学，而落叶则是毕业考，十足可爱。Libby 上还是 read along 版本，会自动播放音频和翻页，现在的小朋友未免也太幸福了吧！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://misty-limit-424f.allison-00c.workers.dev/2025/01/dde7b703d9189cab4cdf2ef9341d4944.webp&#34; alt=&#34;The Very Last Leaf|600&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;el-deafo&#34;&gt;El Deafo&lt;/h3&gt;


&lt;p&gt;半自传图像小说，简介说是讲述一个听障小女孩的故事。因为想多了解一些身心障碍人士的日常而去读，但有些期待落空。听障部分着眼不多，还是一个完全的美国（白人中产）女孩的日常，尤其大量描写对另一个男孩的心动，好无聊。&lt;/p&gt;
&lt;p&gt;另外这个题目，我想但凡稍微有点语言敏感的人都会觉得作者和西班牙语（或者拉丁文化）有点关系吧？但完全没有！只是一个戏仿的超级英雄式的名字，比如“超听侠”之类的，因为主角戴上助听器后机器有一个部分在老师身上（为了让她上课听得清），结果是老师在学校里的其他活动她也会完全听到，所以就像有了超能力一样。可是，如果按照严格的西语语法，主角是个女孩儿，那还应该是 La Deafa。挪用西语，却又不遵守语法规则。作者本人以及这本书的内容都和西语一点关系也没有，这种取名方式算不算误导？和 ChatGPT 聊这个问题，AI 回答说这确实会让人产生文化挪用的印象（我本意并不打算用这么大的词儿但这可是 AI 自己说的）。&lt;/p&gt;
&lt;h3 id=&#34;a-different-pond&#34;&gt;A Different Pond&lt;/h3&gt;


&lt;p&gt;翻图书馆库存，看封面先入为主地以为这是一个华人故事。点开发现其实主角是越南裔移民（或者难民？），有点惭愧我的刻板印象。&lt;/p&gt;
&lt;p&gt;从孩子视角讲述平平无奇的一个清晨。但画面之外有太多可解读的东西了。战争、贫穷、死亡……&lt;/p&gt;
&lt;p&gt;温柔却又伤感。我很喜欢这张波光里泛着的月影。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://misty-limit-424f.allison-00c.workers.dev/2025/02/7ab7980e09e56795a871491d1ac67217.webp&#34; alt=&#34;A Different Pond&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;the-martian&#34;&gt;The Martian&lt;/h3&gt;


&lt;p&gt;中文版我在 2016 年读过，还写了&lt;a href=&#34;book2&#34;&gt;书评&lt;/a&gt;。（16 年的我会自然地称中国为“我们国家”，即使那时同样有不满。现在我却再也不会说“我们”。发生了什么呢。我心中当然有答案，可是想到还是伤心。）&lt;/p&gt;
&lt;p&gt;想找点走路/出行时的调剂就翻出英文版又听了一遍。英文有声书非常非常推荐。朗读者声线、语气甚至口音的转换真是太惊人了。我为开始几分钟嫌弃他声音不够动听反省三秒。&lt;/p&gt;
&lt;p&gt;这故事太有名我想对科幻有点兴趣的人应该早就读过了吧，也无需我再赘述情节。当初中文版就让我爆笑不已，听英文依然乐趣不减，不过听到中美合作救人的情节时我忍不住伤感，曾经我们也是如此地持有乐观主义精神并坚信人类总是有些共识的。对比现实无法不难过。&lt;/p&gt;
&lt;h3 id=&#34;owl-babies&#34;&gt;Owl Babies&lt;/h3&gt;


&lt;p&gt;心理年龄高于五岁可能就不用读了但 baby owl 这么萌！有点年头的绘本，也用了一点拟人手法，不过恰到好处不至于和自然界现象完全南辕北辙。&lt;/p&gt;
&lt;p&gt;书里没写具体是哪种猫头鹰，好奇搜了搜也没找到答案，倒是发现两个帖子有点意思：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.timwarnes.com/blog/2019/9/27/owl-babies&#34;&gt;Owl Babies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/Owls/comments/h92ypf/what_kind_of_owl_is_featured_in_this_childrens/&#34;&gt;Reddit 讨论帖&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fox-versus-winter&#34;&gt;Fox versus Winter&lt;/h3&gt;


&lt;p&gt;&lt;img src=&#34;https://misty-limit-424f.allison-00c.workers.dev/2025/01/ef2ab7bee7f92177733558e207b6bb93.webp&#34; alt=&#34;Fox vs Winter|600&#34;&gt;&lt;/p&gt;
&lt;p&gt;图书馆的 Libby 首页会根据季节做专题推荐，冬天里有这本。虽然狐狸和兔子济济一堂这种事没法细想，可谁让这故事幼稚但是可爱呢！&lt;/p&gt;

</description>

</item>
        
    <item>
<title>2024十一月读书记录</title>
<link>https://thewanderingallison.github.io/posts/20241130/</link>
<pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate>
      
      <guid>https://thewanderingallison.github.io/posts/20241130/</guid>
<description>
    &lt;p&gt;为了力证我这里真的是生活博客（才不是技术博）努力又赶出来一期阅读报告，写了两个多小时，我好努力！其实想写的还有更多，但——实在是写不动了，暂时就这样。&lt;/p&gt;
&lt;h3 id=&#34;罗马日记&#34;&gt;罗马日记&lt;/h3&gt;


&lt;p&gt;So plain.&lt;/p&gt;
&lt;p&gt;我对语言很感兴趣，尤其好奇双语/多语者的语言体验，因此看到作者背景就生出了兴趣：印度裔，母语是孟加拉语；最流利的是英语，用来生活和写作（之前某部作品拿了美国图书馆某某奖）；成年后自学意大利语，甚至出版了意大利语作品。这本书是她搬去意大利一年试图学习意大利语的记录。&lt;/p&gt;
&lt;p&gt;但阅读感受实在糟糕。&lt;/p&gt;
&lt;p&gt;为何自发的语言学习会变成这样一场苦役？第二（或第三）语言的学习过程明明是一个绝佳的不同文化间遨游的旅途，她却像自困于牢笼。为什么要把本应非常愉快的语言学习弄得如此敌对和苦大仇深？她简直是仇恨一般地彻底断绝和英语的接触，学意大利语就必须从英语世界自我放逐吗？英语有那么多词汇直接或间接借自拉丁文，而意大利语又是根植于拉丁语，这种文化比较多么有趣，为什么要人为切断联系？很荒谬，无法理解。&lt;/p&gt;
&lt;p&gt;而书中那篇她用意大利语写作的小说也是如此无趣。同为作家的语言随笔，多和田叶子的《与语言漫步的日记》读完我会很想读她的其他作品，拉希莉只让我怀疑她不太会写全无更进一步阅读的兴趣。&lt;/p&gt;
&lt;h3 id=&#34;荒野之歌&#34;&gt;荒野之歌&lt;/h3&gt;


&lt;p&gt;十位著名自然摄影师人生作品精选集。实在精彩（我也无法不注意到一位女性都没有，但八九十年代可以理解）。&lt;/p&gt;
&lt;p&gt;不是每一张都打动我，但大部分确实非常非常好，生动说明器材和参数不是一切，我最喜欢的几张都是八几年用胶片拍的。摄影是光影的艺术，是瞬间的艺术。胶片的魅力、实体影集的魅力，这依然无可取代。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://misty-limit-424f.allison-00c.workers.dev/2025/02/ee75dd80140448e46497ba79bc690c18.webp&#34; alt=&#34;image.png|600&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;孤独的义务&#34;&gt;孤独的义务&lt;/h3&gt;


&lt;p&gt;一个清淡、乏味版本的金爱烂——不要误会，不是在说金爱烂更好，而是把金爱烂的奇观堆叠和各种黏稠腐烂的意象去除之后，可能剩下的就是这样一种文字。把韩国文学缺乏语言美感的缺点暴露无疑，如果既没有情节，又没有语言张力，并且还没有人物魅力，最后，还缺少深刻的心理洞察，那还有什么？让读者观看无聊和庸常吗？这可以成为主题，但你不能同样写得平庸。第一篇和同名短篇还稍有点意思，其余全都无味，且散淡。&lt;/p&gt;
&lt;h3 id=&#34;贝壳之美&#34;&gt;贝壳之美&lt;/h3&gt;


&lt;p&gt;装帧设计、用纸印刷都很好，图片也非常美丽，然而，这实在是不能称之为书——通篇只有序和译后记两篇文字，其余一行说明也无，甚至，译者在这本书上需要译的总共有没有一千字？译后记看起来都似乎多余。我也理解可能 200 多年前这个图册就是以这样的形式发行的，可是已经21世纪了！多给一些标注讲解不可以吗？&lt;/p&gt;
&lt;p&gt;豆瓣这个&lt;a href=&#34;https://book.douban.com/annotation/127408730/&#34;&gt;帖子&lt;/a&gt;可以看到更多图片，实物的细节更美丽，但——全是图一点介绍都没有很快就腻了。&lt;/p&gt;
&lt;h3 id=&#34;梳毛八卦及语言的进化&#34;&gt;梳毛、八卦及语言的进化&lt;/h3&gt;


&lt;p&gt;两个我非常感兴趣的方向——语言和演化的结合之作。1996 年出版的书现在读来也毫无陈旧之感。&lt;/p&gt;
&lt;p&gt;作者自己的总结就足够精要：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本书的核心论点围绕四大关键点：(1) 灵长类动物的群体规模受限于该物种的新皮层面积；(2) 由于类似的原因，人类的社交网络规模的上限约为 150 人；(3) 灵长类社交梳毛的时间直接关系群体规模，因此梳毛对维系团体至关重要；(4) 人类语言进化是为了替代社交梳毛，因为庞大群体中的梳毛需求多得让人无暇顾及，语言进化可以节省时间，让人更有效地运用时间进行社会交流。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也是读这本书我才意识到前些年大火的那本《人类简史》里被广为流传的 150 人社交规模上限是出自这里。&lt;/p&gt;
&lt;p&gt;结尾这段也让我频频点头，在今天依然适用：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;正因为缺乏自然关系网络的支持，在过去半个世纪中，大量宗教和伪宗教派别如雨后春笋般地出现，吸引着年轻人的注意。从杀人狂查尔斯·曼森 (Charles Manson)、美国大卫教教主大卫·考雷什 (David Koresh)、牧师克里斯·布雷恩 (Chris Brain) 所创建的邪教组织，到邪教统一教 (Moonies) 和印度教克利须那派 (Hare Krishnas)，这些宗教和伪宗教仿佛有一种归属感、集体感和家庭感，对年轻人充满了吸引力。确实，部分更极端的群体特意盯上孤独的年轻人。在上述例子中，他们用花言巧语描绘一种更温馨、更安全的公共生活，用语言调动情感，用话语鼓动人心，使人产生能够上瘾的兴奋感。&lt;/p&gt;
&lt;p&gt;历史上宗教激进主义横扫各国、法西斯主义崛起、猎捕女巫、大屠杀、十字军东征都是很好的例证。这都是因为我们被煽动人心的说辞鼓动，甘愿放弃自我意志，向集体意志投降。维系社区的心理机制已然消失，因为维护共同利益的社区已不复存在。小社区有着长期建立起来的信任、义务和血缘纽带，不会让饱受争议的个人观点损害大家的利益。在现代社会七零八落的社区中，这种保障不复存在，但是对那些宣称与自己一条心的人产生信任的机制还在。投机者可能利用这点使自己获益匪浅。&lt;/p&gt;
&lt;p&gt;同样的情况出现在社会生活的方方面面。过去 20 年相亲栏目和婚介所生意红火，意味着人们缺乏结交对象的社会网络。村庄里的媒人和村庄一同消失了。越来越多的人到新的城镇找工作，他们因为缺乏接触伴侣和伙伴的渠道，陷入社交的真空之中。哪里能认识人又免受豺狼之扰？个人广告栏目和婚介所日渐成为正常社会生活的一部分。接下来还有更让我惊讶的发现。现代都市社区中成年人的友谊并不是从各自的社交中发展而来的，而是从小孩上学的学校或俱乐部发展起来的。毫不夸张地说，改善幼儿园伙食为的不是小孩而是家长。并不是说这些现象本身有什么问题，只是反映出心理上的需求如何驱使我们投靠某些社会媒介。不论如何，缺乏社交和社区归属感也许是 21 世纪最迫切的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其他相当多段落也非常有趣，就不在这里一一摘抄了。&lt;/p&gt;
&lt;h3 id=&#34;万物有灵&#34;&gt;万物有灵&lt;/h3&gt;


&lt;p&gt;和《荒野之歌》一同借回来的，我爱图书馆！又重又贵的摄影集自己买实在是沉重的负担。这本是某个国际摄影比赛某年的获奖作品合集，和上面那本比起来一下子就落了下风。尤其是一些数码照片一眼看去目的性实在是太强了。不过呢我很高兴看到这本里有许多女性摄影师的出现。以及它会更多地观照现实——自然不是无人打扰的仙境，摄影记者奖项部分的照片都太令人心碎，看了其他那么多或美丽或震撼、展现生命图景的图片，再冷不丁被拽入现实，好残酷。&lt;/p&gt;
&lt;p&gt;还有忍不住腹诽，有必要设这么多青少年分组吗？甚至是设了 10 岁以下、11-14、15-17 三个级别！请问 10 岁以下有几个能端稳相机？&lt;/p&gt;
&lt;h3 id=&#34;feathers&#34;&gt;Feathers&lt;/h3&gt;


&lt;p&gt;一本关于羽毛的摄影集，兼以简短介绍。光彩闪耀。&lt;/p&gt;
&lt;p&gt;（顺序上我是最后写的这本已经完全没力气了就插几张图吧！）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://misty-limit-424f.allison-00c.workers.dev/2025/02/d74610c12d2a64b86efb6b3d7a2b5cd9.webp&#34; alt=&#34;feathers 01|600&#34;&gt;
&lt;img src=&#34;https://misty-limit-424f.allison-00c.workers.dev/2025/02/60834d7c3995f3b80f28bbe603d34644.webp&#34; alt=&#34;feathers 02|600&#34;&gt;
&lt;img src=&#34;https://misty-limit-424f.allison-00c.workers.dev/2025/02/4067a126ed6def29152e2633d66c8c2d.webp&#34; alt=&#34;feathers 03|600&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;the-lost-words&#34;&gt;The Lost Words&lt;/h3&gt;


&lt;p&gt;调动了顶级资源的童书可以做到什么地步——文本、绘画、有声书，甚至是配套的&lt;a href=&#34;https://www.johnmuirtrust.org/assets/000/000/948/LOST_WORDS_Explorers-Guide_pages_original_original.pdf&#34;&gt;导读&lt;/a&gt;，不得不羡慕别人的童年。&lt;/p&gt;
&lt;p&gt;过去因为翻 Robert Macfarlane 的作品列表而发现了这本，被概念所吸引：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“When the most recent edition of the &lt;em&gt;Oxford Junior Dictionary&lt;/em&gt; — widely used in schools around the world — was published, a sharp-eyed reader soon noticed that around forty common words concerning nature had been dropped. The words were no longer being used enough by children to merit their place in the dictionary. The list of these ‘lost words’ included &lt;em&gt;acorn&lt;/em&gt;, &lt;em&gt;adder&lt;/em&gt;, &lt;em&gt;bluebell&lt;/em&gt;, &lt;em&gt;dandelion&lt;/em&gt;, &lt;em&gt;fern&lt;/em&gt;, &lt;em&gt;heron&lt;/em&gt;, &lt;em&gt;kingfisher&lt;/em&gt;, &lt;em&gt;newt&lt;/em&gt;, &lt;em&gt;otter&lt;/em&gt;, and &lt;em&gt;willow&lt;/em&gt;. Among the words taking their place were &lt;em&gt;attachment&lt;/em&gt;, &lt;em&gt;blog&lt;/em&gt;, &lt;em&gt;broadband&lt;/em&gt;, &lt;em&gt;bullet-point&lt;/em&gt;, &lt;em&gt;cut-and-paste&lt;/em&gt;, and &lt;em&gt;voice-mail&lt;/em&gt;….&lt;/p&gt;
&lt;p&gt;In response, Robert Macfarlane and Jackie Morris set out to make a ‘spell book’ that would conjure back twenty of these lost words, and the beings they name, from &lt;em&gt;acorn&lt;/em&gt; to &lt;em&gt;wren&lt;/em&gt;. By the magic of word and paint, they sought to summon these words again into the voices, stories, and dreams of children and adults alike, and to celebrate the wonder and importance of everyday nature.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;图书馆没有纸质书，我只能在 YouTube 上看一下 flip through 解馋，超大开本，印刷和设计都超级精美，文字排版也有巧思，像是跳动的音符，也像咒语——要唤回那些失落的自然的密码。&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/uOi1e4ORPQw&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;img src=&#34;https://misty-limit-424f.allison-00c.workers.dev/2025/02/6bf83baf493aad8826baa13d8e7f96dc.webp&#34; alt=&#34;image.png|600&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://misty-limit-424f.allison-00c.workers.dev/2025/02/212dd14540f04b3a2e606070bb3d81cd.webp&#34; alt=&#34;image.png|600&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后在 Audible 上听完了有声书版本。鸟鸣啁啾，虫声窸窣，风声、流水声，每个章节朗读者都不同，我有阵子还反复用它做睡前白噪音——因为这些词我也不熟，&amp;ldquo;acorn, adder, bluebell, dandelion, fern, heron, kingfisher, newt, otter, and willow&amp;rdquo; 等等，我只能认出一半吧……正因为半懂不懂更容易催眠。&lt;/p&gt;
&lt;p&gt;关联阅读（有超多美丽图片）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.johnmuirtrust.org/john-muir-award/ideas-and-resources/literacy-and-nature/the-lost-words&#34;&gt;John Muir Trust | The Lost Words&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.theguardian.com/books/2017/sep/30/robert-macfarlane-lost-words-children-nature&#34;&gt;Badger or Bulbasaur - have children lost touch with nature?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;语言恶女&#34;&gt;语言恶女&lt;/h3&gt;


&lt;p&gt;译者可能尽力了但原书就是碎得不行的句子和社交媒体式宣言，翻过来就变成了公众号+小红书风格。再加上众多词汇不展现英文原词读者很难有实感，大量词语根本没翻，我中英切换得好累， 1/4 后还是选择读原文。看完觉得这个仅代表美国中产白人女性的声音我也并不太想听，她的结论和解决方法也不能说服我，简单粗暴幼稚天真，群体之间的划分都是一刀切的。下次别引进了，学术价值基本是无。看着豆瓣这离奇的高分真想冷笑，互联网女权的饭也是太过容易吃了。&lt;/p&gt;
&lt;h3 id=&#34;wordslut&#34;&gt;Wordslut&lt;/h3&gt;


&lt;p&gt;Totally commercial writing. What I&amp;rsquo;m looking for is in-depth analysis and nuanced exploration of language phenomena, rather than a collection of witty, bite-sized statements in a pop-culture way.&lt;/p&gt;
&lt;p&gt;上面那本的英文版。我接着中文停下的部分又读了 1/4 英文非常不耐烦，作者是根本没有写长句的能力吗？破折号破折号，括号括号，互联网俚语，和中文各种网络热词如出一辙的风格让我耐心尽失，于是后 1/2 在 Audible 里开了倍速（是的！我居然能开倍速听英语了！说明这书是多么没有信息量！）听完了。期间翻了无数个白眼。最后还滑向了下半身器官名词探讨，听的有声书简直像被霸凌，听了一百遍 penis dick pussy cunt 之类我想杀人了！作者还提高音量在我耳边尖叫，我简直要抓狂。难道成为 feminist 还要包括学习这些词汇？还有，停止认领一些糟糕的语言习惯并单方面认为是女性独有 OK？不要把这说成仅是女性的问题然后还试图正当化，这非常可笑。&lt;/p&gt;
&lt;p&gt;许多现象是真实存在的，然而作者引用的论据和得出的结论却是完全不能让我信服。作为一本宣传自己是“语言学”相关的书，正文里却只充满了美式白人年轻女性口语，并且书后毫无参考文献和引用列表，严谨性大打折扣。大量使用俚语/网络语言的写作风格也让我不喜。我完全不赞成作者单方面把许多对糟糕语言习惯的批评简单归因成对女性的蔑视，以及把语言习惯粗暴分成男性的和女性的。Like, you know 等的泛滥在许多人群中都可见到，作者却认为这仅是对女性的打压并为这些习惯辩护。无法同意她的如此多观点。&lt;/p&gt;
&lt;p&gt;不想花费时间给一本我不喜欢的书写长评——但我好像也打了这么多字了，其实我之前还在读书会语音连线时激情喷了它一个多小时。最后再贴一下 goodreads 上点赞最高的&lt;a href=&#34;https://www.goodreads.com/review/show/5539766961&#34;&gt;评论&lt;/a&gt;：internet white feminism。&lt;/p&gt;
&lt;h3 id=&#34;羽毛&#34;&gt;羽毛&lt;/h3&gt;


&lt;p&gt;上面那本 Feathers 的中文版，因为是摄影集看到图书馆有就想借回来再仔细看看图，顺便又把文字部分读了一遍，译、注都很好。让我推荐的话，我会觉得中文版比原版更值得读。一是纠正了好几处原文的错误，二是补充加了不少注释，三是强调说明了某些鸟类仅在部分国家能够作为宠物，在国内私自饲养是违法的（其实我对原文的一些用词不太满意，就算合法，也不应该把鸟类困在人类小小的屋子里吧）。再有就是，美丽的图片当然还是要在纸上欣赏！&lt;/p&gt;
&lt;h3 id=&#34;the-wanderer&#34;&gt;The Wanderer&lt;/h3&gt;


&lt;p&gt;乘桴浮于海。&lt;/p&gt;
&lt;p&gt;好古怪，好美丽，好喜欢。&lt;/p&gt;
&lt;p&gt;无字绘本，没什么可说的，看图感受下吧！&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/BnP9uv7BnDg&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;img src=&#34;https://misty-limit-424f.allison-00c.workers.dev/2025/02/1dbd682d5f7040d8cf7b84bec5ede751.webp&#34; alt=&#34;image.png|600&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;疼痛部&#34;&gt;疼痛部&lt;/h3&gt;


&lt;p&gt;不可言说。&lt;/p&gt;
&lt;p&gt;直到真的出现了一处 SM 情节呼应了这个“疼痛部”的名字（一个 SM 俱乐部），让我猝然从过于真实、破碎的语言困境中惊醒，提醒我——这是小说，不是现实。从小说发展来说我不喜欢这样的安排，但我感谢它，让我抽离出来。&lt;/p&gt;
&lt;h3 id=&#34;荒野之境&#34;&gt;荒野之境&lt;/h3&gt;


&lt;p&gt;整体风格把握得挺好，麦克法伦的书实在难译，现在这样已经不错。有些词还是翻得不准，不过这本书海量名词的工作量相当吓人，可以理解。译者前几年也译了麦克法伦另一本 Underland，对比起来是看得到进步，不管整体译文的处理还是专有名词的查证，都比 Underland 时好不少。但是，还是忍不住想说，常见鸟种已经是最简单的词了，荒野之境里我还是很轻松就能找出错来，编辑审校应该再上点心的。&lt;/p&gt;
&lt;p&gt;在目前读过的麦克法伦的几本书里，这是气质上我最喜欢的一本。先摘一下整本书我最喜欢的部分（之一），回头有空再细聊。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在旅程中见过的种种风景中，有许多令人产生了深切的感情，我发现了不少证据：茅屋墙上钉着的诗；湖边、悬崖顶端或低矮山口处的长凳，纪念着某位逝者最喜欢的观景视角；刻在橡树树干上的刻画。有一次，我在坎布里亚一条瀑布附近的小池里喝水，看到一块石头下面竟藏着一块铜牌：​“纪念乔治·沃克，他曾经非常钟情这个地方。​”我很钟情这份“非常”​。&lt;/p&gt;
&lt;p&gt;我意识到，这些事物都标记着一个持续不断的过程，它存在于这些岛屿上，很可能还遍布全世界：人们总是能从或大或小的风景中获得幸福感。​“幸福”不仅指快乐，也包括这个词所涵盖的众多情感：希望、喜悦、惊奇、优美、安宁，等等。每一天都有不计其数的人，因为遇到了某片特定的风景，感到自己变得更深刻或更高贵了。&lt;/p&gt;
&lt;p&gt;然而，这样的地方大多不会在任何一张地图上被加以特别的标记。它们只会在某个人的记忆里变得特别。一条河流的河湾，四片田野的交界处，一棵可攀爬的树，一条常开车经过的路上偶然瞥到的一段树篱或一片林地——也许这就足够了。或是一些转瞬即逝的经历，虽然短暂，但仍与特定的地点相连：一只雀鹰在花园或街道上低空滑翔而过，或者余晖洒在石头上，或者一片鸽羽挂在蛛丝上，像中了魔法一般在半空中旋转。日常生活中，人们常因为这样的偶遇，一时间惊异不已：我们无法解释它们为何如此触动我们，但也无法否认它们的力量。我想起《白鲸记》中以实玛利说到可可福克岛的话：“它不在任何一张地图中；真正的地方向来如此。”人们很少谈论这样的偶遇。一部分原因是这种经历难以言表。另外一部分原因，我猜想，则是因为有过这种偶遇的人通常并不觉得有广而告之的必要。它可以化为只言片语，跟朋友或伴侣分享；可以在照片中留存下来；可以成为日记中的一条记录或信中的一句话。但许多偶遇甚至无法形成这样的声音。它们将保持不被言说的状态，留存在一个人的思想里。它们将以回忆的形式返回你的脑海，当你站在人潮如球赛现场般拥挤的站台上，或者身处城市中，躺在床上无法入眠，看着往来车灯的光在屋里辗转，此时此刻你便可能会回想起它们。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;金色天国&#34;&gt;金色天国&lt;/h3&gt;


&lt;p&gt;建筑史诗系列。&lt;/p&gt;
&lt;p&gt;讲君士坦丁堡（也就是现在的伊斯坦布尔）的建筑，写得不差，但我烦基督教（以及伊斯兰教）！我也意识到我的偏见有时确实已经大到影响我进入文本了。&lt;/p&gt;

</description>

</item>
        
    <item>
<title>简单装修3.0</title>
<link>https://thewanderingallison.github.io/posts/blog_setting_decorations_3/</link>
<pubDate>Tue, 04 Feb 2025 00:00:00 +0000</pubDate>
      
      <guid>https://thewanderingallison.github.io/posts/blog_setting_decorations_3/</guid>
<description>
    &lt;p&gt;每一个喊着不再给博客搞装修的人食言起来都飞快……&lt;/p&gt;
&lt;h2 id=&#34;一些变动&#34;&gt;一些变动&lt;/h2&gt;
&lt;h3 id=&#34;rss&#34;&gt;RSS&lt;/h3&gt;
&lt;p&gt;看统计数据发现有一些来自 


&lt;a href=&#34;https://morerss.com&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;MoreRSS&lt;/a&gt;
 的访问，好奇看了下，不知谁把我的博客投上去了，我倒没有不高兴，但真心觉得没必要……我这种小小小小小博客有什么好投的？这网站也是挺神奇的，&lt;code&gt;.com&lt;/code&gt; 域名应该也不是很便宜吧，谁搞的这网站居然完全没有联系方式，网上也搜不到相关信息。&lt;/p&gt;
&lt;p&gt;再一看它们也是会展示 RSS 内容的，我不仅是全文输出，而且还是默认输出所有文章，这就有点尴尬了，一两百篇内容在那页面上都拉不到头！太旧的文章也失去时效性了，所以调整了下 RSS 变成只显示最新十篇文章。&lt;/p&gt;
&lt;p&gt;我也犹豫过要不要取消全文输出，Hugo 有个原生的 &lt;code&gt;&amp;lt;!--_more_--&amp;gt;&lt;/code&gt; 语句可以自动截断内容生成摘要，用起来很方便。只是想想我自己都喜欢直接在 Inoreader 里看全文，那己所不欲还是勿施于人吧。&lt;/p&gt;
&lt;h3 id=&#34;自动更新页脚年份&#34;&gt;自动更新页脚年份&lt;/h3&gt;
&lt;p&gt;Footer 上的 &lt;code&gt;Copyright © 2020-2025 Allison&lt;/code&gt; 年份过去我一直是手动改的，因为我这个主题是把 footer 的 copyright 作为 params 写在了 &lt;code&gt;config.toml&lt;/code&gt; 里，而 &lt;code&gt;toml&lt;/code&gt; 文件是没办法直接用 Go 的 &lt;code&gt;{{ now.Year }}&lt;/code&gt; 的，我就死心眼地每年年初手动调整。今年突然醒悟，我何必非要拘泥于 &lt;code&gt;config.toml&lt;/code&gt; 文件，我完全可以去 &lt;code&gt;footer.html&lt;/code&gt; 里改写嘛！又自动化了一项工作，开心！&lt;/p&gt;
&lt;h3 id=&#34;友链&#34;&gt;友链&lt;/h3&gt;
&lt;p&gt;很久之前加过一个 &lt;code&gt;details.html&lt;/code&gt; 的 shortcode，是为了把友链的失效链接放进 archive。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#000080&#34;&gt;details&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;(.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;Get&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;open&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&amp;#34;)&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;Params&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;open&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&amp;#34;)&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;}}&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;open&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;}}&lt;/span&gt;&amp;gt;

    {{- $summary := cond .IsNamedParams (.Get &amp;#34;title&amp;#34;) (.Get 0) -}}

    &amp;lt;&lt;span style=&#34;color:#000080&#34;&gt;summary&lt;/span&gt;&amp;gt;{{ $summary | .Page.RenderString }}&amp;lt;/&lt;span style=&#34;color:#000080&#34;&gt;summary&lt;/span&gt;&amp;gt;

    &amp;lt;&lt;span style=&#34;color:#000080&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;markdown-inner&amp;#34;&lt;/span&gt;&amp;gt;

      {{ .Inner | .Page.RenderString }}

    &amp;lt;/&lt;span style=&#34;color:#000080&#34;&gt;div&lt;/span&gt;&amp;gt;

  &amp;lt;/&lt;span style=&#34;color:#000080&#34;&gt;details&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用起来就是下面这样：&lt;/p&gt;
&lt;details &gt;&lt;summary&gt;点这里&lt;/summary&gt;
    &lt;div class=&#34;markdown-inner&#34;&gt;
      这里是隐藏内容。
    &lt;/div&gt;
  &lt;/details&gt;
&lt;p&gt;现在链接倒是都能访问（但是新链接是靠我自己发现的，也是有点无奈），不过有几个超过一年都没有更新，这次就也暂时隐藏了。希望大家都多多更新啊！&lt;/p&gt;
&lt;h3 id=&#34;托管博客到-vercel&#34;&gt;托管博客到 Vercel&lt;/h3&gt;
&lt;p&gt;登陆 Vercel 账号连接 GitHub 上的 Hugo 仓库（不是 public 而是整个站）新建 project，在 project 设置里重命名 domain，我还是沿用了 &lt;code&gt;thewanderingallison&lt;/code&gt; 这个名字。&lt;/p&gt;
&lt;p&gt;这时 Hugo  &lt;code&gt;config.toml&lt;/code&gt; 文件里的 &lt;code&gt;baseURL&lt;/code&gt; 还是原来的，想同时在 GitHub Pages 和 Vercel 上托管网站的话，有两种方案。&lt;/p&gt;
&lt;p&gt;简单方案是直接在 Vercel project 的 &lt;code&gt;Environment Variables&lt;/code&gt; 里加一个 &lt;code&gt;HUGO_BASEURL&lt;/code&gt;，值写 Vercel 地址，我这个就是 &lt;code&gt;https://thewanderingallison.vercel.app&lt;/code&gt;，可以访问


&lt;a href=&#34;https://thewanderingallison.vercel.app&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;这里&lt;/a&gt;
  试试看。弊端是如果站内引用是完整地址而非相对地址的话，跳转的还是旧站地址。&lt;/p&gt;
&lt;p&gt;另一个方法是在根目录下新建一个 &lt;code&gt;config.vercel.toml&lt;/code&gt; 和 &lt;code&gt;vecel.json&lt;/code&gt; 文件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vecel.json&lt;/code&gt; 的内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#000080&#34;&gt;&amp;#34;buildCommand&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;hugo --config config.vercel.toml&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#000080&#34;&gt;&amp;#34;outputDirectory&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;public&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而 &lt;code&gt;config.vercel.toml&lt;/code&gt; 则是可以复制原始的 &lt;code&gt;config.toml&lt;/code&gt; ，再更精细地调整站点设置，不仅仅是 &lt;code&gt;baseURL&lt;/code&gt; 了，站名、intro、navbar 等等都可以重定义。&lt;/p&gt;
&lt;p&gt;还可以用类似思路把网站托管到 Netlify，我在另一个博客上试了下，步骤稍有不同但一样简单，就不详细写了。&lt;/p&gt;
&lt;h2 id=&#34;一点犹豫&#34;&gt;一点犹豫&lt;/h2&gt;
&lt;h3 id=&#34;要不要彻底转移到-vercel&#34;&gt;要不要彻底转移到 Vercel&lt;/h3&gt;
&lt;p&gt;想变动是因为现在我的博客还可以在墙内访问，墙内访问也就罢了我没有那么在乎。更不能忍的是看到流量来源有百度、抖音、头条之类，以及零星几个来自飞书和 flomo，这让我非常不爽，我不喜欢这些产品，一点也不希望自己的网站和它们扯上关系。还有用 GitHub Pages 意味着这个 repo 是公开的，放到 Vercel 源码就可以隐藏。&lt;/p&gt;
&lt;p&gt;不想变动的理由则是——我不喜欢变化，对目前这个 url 居然也生出了点感情。此外早期博文里的站内引用链接得改，这个可以靠写脚本完成，工作量不算大（可还是得我操作啊！）。还有 Disqus、GA、Umami、Bing Webmaster Tools 等一系列东西也得跟着变动，想到就头疼。&lt;/p&gt;
&lt;h3 id=&#34;要不要停用-reaction&#34;&gt;要不要停用 reaction&lt;/h3&gt;
&lt;p&gt;先后看到好几个博客加上了爱心 reaction，我还在犹豫时发现一个我不太喜欢的博客也用上了它并且一篇我更不喜欢的博文居然有 100 多赞！好了，彻底打消加上这个功能的念头。&lt;/p&gt;
&lt;p&gt;而 Disqus 自带的这个 reaction 我一直嫌弃它有点累赘。我自己其实在互联网上极少点赞，过去在微博或者豆瓣是从来不点。等到了长毛象，尤其是在已注销的上一个账号上，有人几乎每条都点赞，却从来不跟我说话，导致我都有点压力。而其他互关的象友也会时不时点星，于是我渐渐也会礼尚往来一下。但我还是更倾向于留言，总觉得表达共鸣或者喜爱还是用语言比较好吧？我不是质疑其他人的习惯，我也当然理解点赞同样是表达友好，只是从我的角度来说，我不太看重这个。不过我的访客好像确实也会用到，就还是很纠结。&lt;/p&gt;

</description>

</item>
        
    <item>
<title>瞎折腾之博客流程优化</title>
<link>https://thewanderingallison.github.io/posts/toolbox20250130/</link>
<pubDate>Thu, 30 Jan 2025 00:00:00 +0000</pubDate>
      
      <guid>https://thewanderingallison.github.io/posts/toolbox20250130/</guid>
<description>
    &lt;p&gt;有点不好意思写这么鸡毛蒜皮的折腾，但是不记一下我肯定会忘，所以……&lt;/p&gt;
&lt;p&gt;反正我的博客我做主！&lt;/p&gt;
&lt;p&gt;一个是关于 Obsidian 和 PicList。&lt;/p&gt;
&lt;p&gt;之前 PicList 是设置的开机启动，但我的笔电实在是有点旧每次都得开着任务管理器小心哪个应用太占地，PicList 比 PicGo 更占内存，而我只有开 Obsidian 的时候才会需要用到 PicList 上传，根本没必要开机就启动。如果在 Obsidian 写到一半要上传图片时再开 PicList 又觉得有点麻烦，靠着万能的 AI 写了个 bat 文件，让 PicList 和 Obsidian 联动，这样打开和退出 Obsidian 时 Piclist 也自动启动和关闭。试用两天之后发现 bat 文件运行后会在 taskbar 保留一个窗口很碍眼，而且要是关闭这个文件的话 Obsidian 和 PicList 也会停止。那有没有什么办法彻底让 bat 窗口隐藏呢？问了 AI 给我的答案居然是用 VB 写一个脚本让 bat 程序在后台运行。VB！这什么祖奶奶级别的语言！但是真的很有用！&lt;/p&gt;
&lt;p&gt;所以就是先建一个 bat 文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-batch&#34; data-lang=&#34;batch&#34;&gt;@&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;echo&lt;/span&gt; off
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;start&lt;/span&gt; /b &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;Obsidian&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;C:\Path\to\Obsidian.exe&amp;#34;&lt;/span&gt; 
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;start&lt;/span&gt; /b &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;PicList&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;C:\Path\to\PicList.exe&amp;#34;&lt;/span&gt;

:&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;wait_for_obsidian&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt; &lt;/span&gt;
tasklist /FI &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;IMAGENAME eq Obsidian.exe&amp;#34;&lt;/span&gt; | findstr /I &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;Obsidian.exe&amp;#34;&lt;/span&gt; &amp;gt;nul 
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;errorlevel&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;goto&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;exit_piclist&lt;/span&gt;

timeout /t 1 &amp;gt;nul 
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;goto&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;wait_for_obsidian&lt;/span&gt;

:&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;exit_piclist&lt;/span&gt;
taskkill /IM PicList.exe /F
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再建一个 vbs 文件，比如 &lt;code&gt;run_hidden.vbs&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vbscript&#34; data-lang=&#34;vbscript&#34;&gt;Set WshShell = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)
WshShell.Run chr(34) &amp;amp; &amp;quot;C:\Path\to\Your\BatchFile.bat&amp;quot; &amp;amp; chr(34), 0, True 
Set WshShell = Nothing
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;替换相应路径，再为 vb 文件创建一个桌面快捷方式，之后启动这个快捷方式，就可以自动打开 Obsidian 和 Piclist，上面的 bat 脚本在后台运行，之后退出 Obsidian 时 PicList 也会自动关闭。&lt;/p&gt;
&lt;p&gt;另一个则是关于我的读书记录。&lt;/p&gt;
&lt;p&gt;之前我是从博客同步的书影音 CSV 文件里手动复制，再给标题加 &lt;code&gt;###&lt;/code&gt;和 shortcode 格式，即使每次用上 alt + shift 批量编辑多条信息我也觉得很烦。因为我几乎每个月都要处理这个问题，并且每次都是十几甚至几十条，这种重复劳动也是太烦人。现在的方案是用 Python 要求输入日期，然后读取 CSV 文件内该时间段的 &lt;code&gt;title&lt;/code&gt;、&lt;code&gt;id&lt;/code&gt;、&lt;code&gt;comment&lt;/code&gt; column，再按标记时间增序输出特定格式，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://misty-limit-424f.allison-00c.workers.dev/2025/01/python_output.png&#34; alt=&#34;python_output&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;pandas&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;pd&lt;/span&gt;

&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;process_csv&lt;/span&gt;():
    &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# Step 1: Ask for input&lt;/span&gt;
    date_input &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0086b3&#34;&gt;input&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;Enter a date (format: yyyymm): &amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# Ensure date is valid&lt;/span&gt;
        pd&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;to_datetime(date_input, format&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;%Y%m&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;ValueError&lt;/span&gt;:
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;Invalid date format. Please use yyyymm.&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt;

    &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# Step 2: Read the CSV file&lt;/span&gt;
    file_path &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;CSV file&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;#replace with actual csv file path &lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;try&lt;/span&gt;:
        df &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;read_csv(file_path)
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;except&lt;/span&gt; FileNotFoundError:
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;File not found. Please provide a valid path.&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;as&lt;/span&gt; e:
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;An error occurred while reading the file: {e}&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt;

    &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# Check if required columns exist&lt;/span&gt;
    required_columns &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;star_time&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;comment&amp;#34;&lt;/span&gt;}
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;not&lt;/span&gt; required_columns&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;issubset(df&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;columns):
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;The CSV file must contain these columns: {required_columns}&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt;

    &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# Step 3: Filter rows based on the input date&lt;/span&gt;
    df[&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;star_time&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;to_datetime(df[&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;star_time&amp;#34;&lt;/span&gt;], errors&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;coerce&amp;#34;&lt;/span&gt;)
    filtered_df &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; df[df[&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;star_time&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;dt&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;strftime(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;%Y%m&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;==&lt;/span&gt; date_input]

    &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# Step 4: Sort the results by date (ascending)&lt;/span&gt;
    sorted_df &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; filtered_df&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;sort_values(by&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;star_time&amp;#34;&lt;/span&gt;, ascending&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#999&#34;&gt;True&lt;/span&gt;)

    &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# Step 5: Format the output as Markdown&lt;/span&gt;
    md_content &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;for&lt;/span&gt; _, row &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; sorted_df&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;iterrows():
         md_content &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+=&lt;/span&gt; f&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;###{row[&amp;#39;title&amp;#39;]}&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;&lt;/span&gt;
         md_content &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+=&lt;/span&gt; f&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;{{{/{&amp;lt;douban &lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;{row[&amp;#39;id&amp;#39;]}&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt; &amp;gt;}/}}}&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;&lt;/span&gt;  
         &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# 取消反斜杠/&lt;/span&gt;
         md_content &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+=&lt;/span&gt; f&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;{row[&amp;#39;comment&amp;#39;]}&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# Step 6: Save the output as an .md file&lt;/span&gt;
    output_folder &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;your_folder_path&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# Replace &amp;#34;your_folder_path&amp;#34; with the actual path to your folder&lt;/span&gt;
    output_file &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;{output_folder}/{date_input}.md&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#0086b3&#34;&gt;open&lt;/span&gt;(output_file, &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;, encoding&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
            f&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;write(md_content)
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;Markdown file saved as &amp;#39;{output_file}&amp;#39;.&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;as&lt;/span&gt; e:
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;print&lt;/span&gt;(f&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;An error occurred while writing the Markdown file: {e}&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# Run the script&lt;/span&gt;
process_csv()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>

</item>
        
    <item>
<title>Cloudflare &#43; Backblaze &#43; PicList 搭建博客图床（无需自有域名）</title>
<link>https://thewanderingallison.github.io/posts/image-hosting-blog-cloudflare-backblaze-piclist/</link>
<pubDate>Mon, 27 Jan 2025 00:00:00 +0000</pubDate>
      
      <guid>https://thewanderingallison.github.io/posts/image-hosting-blog-cloudflare-backblaze-piclist/</guid>
<description>
    &lt;p&gt;(在火车上无聊于是开始写博客，我这精神真是感天动地…)&lt;/p&gt;
&lt;p&gt;过去我用 GitHub 的仓库当图床，配合 PicGo 自动上传，但一来 GitHub 的仓库和单个文件都有大小限制，二来我觉得这多少是对 Github 的滥用，最近终于完成了新的图床配置并且运行良好，在这里记录下（写到后面太烦了开始中英夹杂，只求自己看懂就行，请见谅）。&lt;/p&gt;
&lt;p&gt;在一众 object storage 服务商中（Cloudflare、Wasabi、AWS、Scaleway、IBM Cloud Object Storage、Azure、Oracle），Backblaze 是唯一不添加付款信息就可使用的服务，只是有限制条件，只能创建 private bucket。也可以付费 $1 进行验证后创建 public bucket。一美金不是问题，但我不想在还不够了解运作流程的情况下贸然添加支付信息，而且这个网络账号所关联的信息我会希望尽可能和现实身份隔离。&lt;/p&gt;
&lt;p&gt;其他几个可参考的教程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;


&lt;a href=&#34;https://www.backblaze.com/docs/cloud-storage-deliver-private-backblaze-b2-content-through-cloudflare-cdn&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Deliver Private Backblaze B2 Content Through Cloudflare CDN&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;


&lt;a href=&#34;https://leonis.cc/sui-sui-nian/2023-11-17-deploy-backblaze-image-hosting.html&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Cloudflare + Backblaze 实现免费的博客图床方案 - Leo’s blog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;


&lt;a href=&#34;https://blog.standat42.com/posts/image-hosting-backblaze-b2-private-cloudflare-workers-picgo/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Blog 图床方案：Backblaze B2 (私密桶) + Cloudflare Workers + PicGo | Standat&amp;rsquo;s Blog&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我没有自己的域名，以上步骤对我不太适用，worker 部分全是根据自己需求写的，这篇只是过程，不是教程，请酌情参考。&lt;/p&gt;
&lt;h3 id=&#34;backblaze&#34;&gt;Backblaze&lt;/h3&gt;
&lt;p&gt;Backblaze free account plan:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Backblaze B2 has a free account with 10GB of storage. The free account includes 1GB of daily download bandwidth, 2,500 class B transactions connected to downloads and 2,500 class C transactions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于博客图床来说是够用了。&lt;/p&gt;
&lt;h4 id=&#34;创建-bucket&#34;&gt;创建 bucket&lt;/h4&gt;
&lt;p&gt;在


&lt;a href=&#34;https://www.backblaze.com/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;官网&lt;/a&gt;
注册账号，新建 private bucket，命名（尽可能复杂）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://misty-limit-424f.allison-00c.workers.dev/2025/01/0a06394665391aa470f1613ec14a3fa2.webp&#34; alt=&#34;create b2 bucket|600&#34;&gt;&lt;/p&gt;
&lt;p&gt;在Bucket Settings 中的 Bucket Info 内添加：&lt;code&gt;{&amp;quot;cache-control&amp;quot;: &amp;quot;public, max-age=86400&amp;quot;}&lt;/code&gt;，也可将数字调得更大，86400 是缓存一天。&lt;/p&gt;
&lt;p&gt;记下 bucket 的 &lt;code&gt;endpoint&lt;/code&gt;，在下面的 PicList 设置里要用。&lt;/p&gt;
&lt;h4 id=&#34;创建-application-key&#34;&gt;创建 application key&lt;/h4&gt;
&lt;p&gt;新建两个 application key。我是为了将 PicList 上传和 Cloudflare 访问区分开，前者的权限是 &lt;code&gt;Read and Write&lt;/code&gt;，后者则只是 &lt;code&gt;Read Only&lt;/code&gt;。不介意的话也可以只建一个，但权限就需要设置成 &lt;code&gt;Read and Write&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://misty-limit-424f.allison-00c.workers.dev/2025/01/eec350dc4e1e5948c60991b33d4956a6.webp&#34; alt=&#34;create application key |600&#34;&gt;&lt;/p&gt;
&lt;p&gt;接下来这个页面只会出现一次，复制下 &lt;code&gt;keyID&lt;/code&gt; 、&lt;code&gt;keyName&lt;/code&gt;、&lt;code&gt;applicationKey&lt;/code&gt; 的值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://misty-limit-424f.allison-00c.workers.dev/2025/01/32bb309c1b638631a8966be569a2b359.webp&#34; alt=&#34;application key info|600&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;cloudflare&#34;&gt;Cloudflare&lt;/h3&gt;
&lt;h4 id=&#34;创建-worker&#34;&gt;创建 worker&lt;/h4&gt;
&lt;p&gt;复制以下代码。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-JavaScript&#34; data-lang=&#34;JavaScript&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;default&lt;/span&gt; {

  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;async&lt;/span&gt; fetch(request, env) {

    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;const&lt;/span&gt; API_KEY_ID &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; env.API_KEY_ID; &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// Application Key ID
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;const&lt;/span&gt; API_KEY &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; env.API_KEY; &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// Application Key
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;const&lt;/span&gt; BUCKET_NAME &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; env.BUCKET_NAME; &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// Bucket Name
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;const&lt;/span&gt; KV_NAMESPACE &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; env.KV_NAMESPACE; &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// KV namespace for rate limiting
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;    
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;const&lt;/span&gt; ALLOWED_REFERERS &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;https://site1/&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;https://site2/&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;https://site3/&amp;#34;&lt;/span&gt;,
                              &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;https://localhost:1313/&amp;#34;&lt;/span&gt;
                            ]; &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// List of allowed referers
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;const&lt;/span&gt; MAX_REQUESTS_PER_DAY &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;1000&lt;/span&gt;; &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// Limit to 1000 requests per day
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;const&lt;/span&gt; url &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;new&lt;/span&gt; URL(request.url);
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;const&lt;/span&gt; filePath &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; url.pathname.slice(&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// Extract file path from URL
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;!&lt;/span&gt;filePath) {
      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;new&lt;/span&gt; Response(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;File path not provided&amp;#34;&lt;/span&gt;, { status&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;400&lt;/span&gt; });
    }

    &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// Step 1: Validate Referer Header
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;const&lt;/span&gt; referer &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; request.headers.get(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;Referer&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;const&lt;/span&gt; isAllowedReferer &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;
      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;!&lt;/span&gt;referer &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;||&lt;/span&gt; ALLOWED_REFERERS.some((allowed) =&amp;gt; referer.includes(allowed));

    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;!&lt;/span&gt;isAllowedReferer) {
      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;new&lt;/span&gt; Response(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;Invalid referer&amp;#34;&lt;/span&gt;, { status&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;403&lt;/span&gt; });
    }

    &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// Access Cloudflare Cache API
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;const&lt;/span&gt; cache &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; caches.&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;default&lt;/span&gt;;

    &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// Check if the response is already in cache
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;const&lt;/span&gt; cachedResponse &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;await&lt;/span&gt; cache.match(request);
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; (cachedResponse) {
      console.log(&lt;span style=&#34;color:#d14&#34;&gt;`Cache hit for: &lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;${&lt;/span&gt;filePath&lt;span style=&#34;color:#d14&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;`&lt;/span&gt;);
      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; cachedResponse; &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// Serve from cache
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;    }

    &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// Step 2: Rate Limiting using KV
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;const&lt;/span&gt; currentDate &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#0086b3&#34;&gt;Date&lt;/span&gt;().toISOString().split(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;T&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt;]; &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// YYYY-MM-DD
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;const&lt;/span&gt; requestCountKey &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;${&lt;/span&gt;currentDate&lt;span style=&#34;color:#d14&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;${&lt;/span&gt;filePath&lt;span style=&#34;color:#d14&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;`&lt;/span&gt;;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;let&lt;/span&gt; requestCount &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;await&lt;/span&gt; KV_NAMESPACE.get(requestCountKey)) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt;;

    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; (requestCount &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;=&lt;/span&gt; MAX_REQUESTS_PER_DAY) {
      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;new&lt;/span&gt; Response(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;Daily limit reached for this file&amp;#34;&lt;/span&gt;, { status&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;429&lt;/span&gt; });
    }

    requestCount &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0086b3&#34;&gt;parseInt&lt;/span&gt;(requestCount) &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;await&lt;/span&gt; KV_NAMESPACE.put(requestCountKey, requestCount, { expirationTtl&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;86400&lt;/span&gt; }); &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// Reset every 24 hours
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;
    console.log(&lt;span style=&#34;color:#d14&#34;&gt;`Request count for &lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;${&lt;/span&gt;filePath&lt;span style=&#34;color:#d14&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;${&lt;/span&gt;requestCount&lt;span style=&#34;color:#d14&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;`&lt;/span&gt;);

    console.log(&lt;span style=&#34;color:#d14&#34;&gt;`Cache miss for: &lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;${&lt;/span&gt;filePath&lt;span style=&#34;color:#d14&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;. Fetching from Backblaze.`&lt;/span&gt;);

    &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// Step 3: Authenticate with Backblaze
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;const&lt;/span&gt; authResponse &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;await&lt;/span&gt; fetch(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;https://api.backblazeb2.com/b2api/v2/b2_authorize_account&amp;#34;&lt;/span&gt;, {
      headers&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; {
        Authorization&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;`Basic &lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;${&lt;/span&gt;btoa(&lt;span style=&#34;color:#d14&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;${&lt;/span&gt;API_KEY_ID&lt;span style=&#34;color:#d14&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;${&lt;/span&gt;API_KEY&lt;span style=&#34;color:#d14&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;`&lt;/span&gt;)&lt;span style=&#34;color:#d14&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;`&lt;/span&gt;,
      },
    });

    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;const&lt;/span&gt; authResponseText &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;await&lt;/span&gt; authResponse.text();

    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;!&lt;/span&gt;authResponse.ok) {
      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;new&lt;/span&gt; Response(&lt;span style=&#34;color:#d14&#34;&gt;`Authorization failed: &lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;${&lt;/span&gt;authResponseText&lt;span style=&#34;color:#d14&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;`&lt;/span&gt;, { status&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;500&lt;/span&gt; });
    }

    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;const&lt;/span&gt; authData &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; JSON.parse(authResponseText);
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;const&lt;/span&gt; authToken &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; authData.authorizationToken;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;const&lt;/span&gt; downloadUrl &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; authData.downloadUrl; &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// Base URL for the bucket
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// Step 4: Construct the file URL
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;const&lt;/span&gt; b2FileUrl &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;${&lt;/span&gt;downloadUrl&lt;span style=&#34;color:#d14&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;/file/&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;${&lt;/span&gt;BUCKET_NAME&lt;span style=&#34;color:#d14&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;${&lt;/span&gt;filePath&lt;span style=&#34;color:#d14&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;`&lt;/span&gt;;

    &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// Step 5: Fetch the file from Backblaze
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;const&lt;/span&gt; fileResponse &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;await&lt;/span&gt; fetch(b2FileUrl, {
      headers&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; {
        Authorization&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; authToken,
      },
    });

    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;!&lt;/span&gt;fileResponse.ok) {
      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;const&lt;/span&gt; errorText &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;await&lt;/span&gt; fileResponse.text();
      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;new&lt;/span&gt; Response(&lt;span style=&#34;color:#d14&#34;&gt;`Failed to fetch file from Backblaze: &lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;${&lt;/span&gt;errorText&lt;span style=&#34;color:#d14&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;`&lt;/span&gt;, { status&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;404&lt;/span&gt; });
    }

    &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// Clone the response to store in cache
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;const&lt;/span&gt; responseToCache &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;new&lt;/span&gt; Response(fileResponse.body, {
      headers&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; {
        &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; fileResponse.headers.get(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;),
        &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;Cache-Control&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;public, max-age=31536000&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// Cache for 1 year
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;      },
    });

    &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// Store the response in cache
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;await&lt;/span&gt; cache.put(request, responseToCache.clone());
    &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;// Return the fetched response to the client
&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; responseToCache;
  },
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;几个自定义的值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ALLOWED_REFERERS&lt;/code&gt;: 允许引用该图片地址的网站&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MAX_REQUESTS_PER_DAY&lt;/code&gt;：cloudflare 每日最多授权访问 backblaze 的次数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max-age&lt;/code&gt;：cloudflare 缓存时间，我直接设置成了一年。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个 worker 的作用是使用 application key 访问 private bucket 获取图片地址缓存到 cloudflare 并生成一个公开可见的 cloudflare worker 地址。加上 ALLOWED_REFERERS 是避免外站引用，毕竟我的免费账户流量有限，同时在没有 header 的情况下在我的 Obsidian 里可以预览。&lt;/p&gt;
&lt;p&gt;另外绑定 KV Namespace 设置 Cloudflare 每日可对 Backblaze 发出 request 次数，这是为了防止 class c transition 超标，之前有一天很莫名地 cloudflare 对 backblaze 请求 authorize 2000 多次，所以我加上这个以防万一。&lt;/p&gt;
&lt;h4 id=&#34;创建-kv-namespace&#34;&gt;创建 KV Namespace&lt;/h4&gt;
&lt;p&gt;写不动了看 ChatGPT 写的吧。&lt;/p&gt;
&lt;h5 id=&#34;create-a-kv-namespace&#34;&gt;Create a KV Namespace&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Go to your Cloudflare dashboard.&lt;/li&gt;
&lt;li&gt;Navigate to &lt;strong&gt;Workers&lt;/strong&gt; &amp;gt; &lt;strong&gt;KV&lt;/strong&gt; &amp;gt; &lt;strong&gt;Create a Namespace&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Give your namespace a name (e.g., &lt;code&gt;daily-usage-tracker&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;bind-the-namespace-to-your-worker&#34;&gt;Bind the Namespace to Your Worker&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;After creating the namespace, you&amp;rsquo;ll need to bind it to your Worker.&lt;/li&gt;
&lt;li&gt;Go to your Worker script in the Cloudflare dashboard.&lt;/li&gt;
&lt;li&gt;Under the &lt;strong&gt;Settings&lt;/strong&gt; tab, find the &lt;strong&gt;KV Namespace Bindings&lt;/strong&gt; section.&lt;/li&gt;
&lt;li&gt;Add a binding by giving it a name (e.g., &lt;code&gt;KV_NAMESPACE&lt;/code&gt;) and selecting the namespace you created earlier.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;use-the-namespace-in-your-script&#34;&gt;Use the Namespace in Your Script&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;The binding (&lt;code&gt;KV_NAMESPACE&lt;/code&gt;) will be available in the &lt;code&gt;env&lt;/code&gt; object passed to your Worker script.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;创建-secrets&#34;&gt;创建 secrets&lt;/h4&gt;
&lt;p&gt;在 worker 设置里新建以下 secrets：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;API_KEY_ID&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;API_KEY&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BUCKET_NAME&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;值是上面用于 cloudflare 的 read only 的 application key 对应内容。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://misty-limit-424f.allison-00c.workers.dev/2025/01/6a533b3f68f6af917986059c91c99a8f.webp&#34; alt=&#34;worker secrets|600&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;piclist&#34;&gt;PicList&lt;/h3&gt;
&lt;p&gt;


&lt;a href=&#34;https://piclist.cn/&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;Official Document&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;PicGo 也支持 S3 图床但需要另外安装插件，而不知是不是这个项目久不维护了，安装插件频繁报错，之前我装 exif remover 时就费了很大功夫，重装 npm packages，设置 npm proxy 等等等等，而 PicList 内置了这些功能，索性直接迁移了。&lt;/p&gt;
&lt;p&gt;下载了 PicList Windows exe 程序又安装不上，微软什么毛病，头大，只能用命令行安装，那又先得安装 scope。&lt;/p&gt;
&lt;h4 id=&#34;install-scope&#34;&gt;Install scope&lt;/h4&gt;
&lt;p&gt;Open a PowerShell terminal (version 5.1 or later) and from the PS C:&amp;gt; prompt, run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
Invoke-RestMethod -Uri https://get.scoop.sh | Invoke-Expression
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;How to open PowerShell from PS C:&amp;gt; prompt:&lt;/p&gt;
&lt;p&gt;Press &lt;code&gt;Windows + R&lt;/code&gt;, type &lt;code&gt;powershell&lt;/code&gt;, and hit Enter.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;
&lt;span style=&#34;color:#0086b3&#34;&gt;cd&lt;/span&gt; C:&lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;install-piclist&#34;&gt;Install Piclist&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;scoop bucket add lemon https://github.com/hoilc/scoop-lemon
scoop install lemon/piclist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;题外话，安装时发现语言选英文的话，设置里图床他们用的词居然真的是 pic bed，乐。我搜英文教程时因为不知道图床叫什么就用的 image hosting，后来发现好像确实也就是这么用，而图床是中文里的用法，似乎并没有字面上完全对应的英文。&lt;/p&gt;
&lt;h4 id=&#34;import-picgo-config&#34;&gt;Import PicGo config&lt;/h4&gt;
&lt;p&gt;PicGo 设置可以一键导入，如果已经在那边用上了 S3 或其他图床就无需再配置。&lt;/p&gt;
&lt;h4 id=&#34;config-s3-account&#34;&gt;Config S3 account&lt;/h4&gt;
&lt;p&gt;来设置 PicList 里的 S3 图床，要填的是以下几栏。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AccessKeyID：&lt;/li&gt;
&lt;li&gt;SecretAccessKey：&lt;/li&gt;
&lt;li&gt;Bucket： bucket name&lt;/li&gt;
&lt;li&gt;Self Endpoint： &lt;code&gt;https://{endpoint}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set ACL：private&lt;/li&gt;
&lt;li&gt;Self Custom URL：cloudflare worker 地址&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://misty-limit-424f.allison-00c.workers.dev/2025/01/bca9f0143a7535845c09f625413089e1.webp&#34; alt=&#34;PicList Config|600&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;obsidian&#34;&gt;Obsidian&lt;/h3&gt;
&lt;p&gt;Obsidian 里的 Image auto upload 插件对 PicGo 和 PicList 都适用，以前安装过就不用再变动了。&lt;/p&gt;
&lt;p&gt;具体我的图片上传流程可见 


  

&lt;a href=&#34;https://thewanderingallison.github.io/posts/my_blogging_workflow&#34; &gt;我的博客写作流程&lt;/a&gt;
。&lt;/p&gt;

</description>

</item>
        
    <item>
<title>2024九十月读书记录</title>
<link>https://thewanderingallison.github.io/posts/20241031/</link>
<pubDate>Fri, 24 Jan 2025 00:00:00 +0000</pubDate>
      
      <guid>https://thewanderingallison.github.io/posts/20241031/</guid>
<description>
    &lt;p&gt;点击我的&lt;a href=&#34;https://thewanderingallison.github.io/books/&#34;&gt;阅读页面&lt;/a&gt; 即可跳转对应条目。&lt;/p&gt;
&lt;h3 id=&#34;what-an-owl-knows&#34;&gt;What an Owl Knows&lt;/h3&gt;


&lt;p&gt;对一些猫头鹰最新研究的综述。&lt;/p&gt;
&lt;p&gt;看了两章后剩余是听的 audiobook，所以只能拣出一些零碎印象。&lt;/p&gt;
&lt;p&gt;很显然，大家都爱猫头鹰，有很多研究数据是得益于志愿者们的贡献，许多人在正职之外为各个研究项目提供支持，这种模式其实非常值得推广。之前也在其他书里读到过类似的倡导，比如你可以寻找一个自己的小小“自留地”，它是步行可达非常方便观察的地点，长时间地留意一块土地生态的变化。&lt;/p&gt;
&lt;p&gt;其他知识点比如 barn owl 的 baby owl 和人类婴儿一样是 rem（有梦睡眠）更多，因此作者提问，它们会做梦吗？它们会说梦话吗？（目前还没有答案。）&lt;/p&gt;
&lt;p&gt;大部分猫头鹰不仅是社会层面的单偶制，还是基因上的单偶制——也就是很少有配偶之外的繁殖现象，这在鸟类中可以说是相当罕见。但至于是否真的没有婚外情，这我们就不得而知了。&lt;/p&gt;
&lt;p&gt;另一个需要牢记在心的认知则是，我们过去所学到的关于猫头鹰的知识并不能完全应用于所有猫头鹰种群上：不是所有猫头鹰都是夜行性的，不是所有都可以无声飞行，不是所有都有不对称耳朵，不是所有都终身配对，不是所有都栖息在森林里。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So many of the generalizations we’ve learned about owls don’t hold true for all species. Not all owls are nocturnal. Not all fly quietly. Not all have asymmetrical ears. Not all mate for life. Not all roost in forest trees.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再其他的，呃，几个月过去加上都是听的，让我复述也是太难了。Audiobook 是作者自己读的，声音温柔动听不说，她还会活灵活现学各种猫头鹰叫，把我萌翻了！真是散步良伴。听完我又迅速过了一遍书里插图，好多美丽照片，尤其是最后的大头照，捂住心口倒地，请问谁会不爱猫头鹰！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://misty-limit-424f.allison-00c.workers.dev/2025/01/8fa2b276a6f29dccd55f0d8aca5ca0e0.webp&#34; alt=&#34;Snipaste_2024-09-02_00-25-47.png|600&#34;&gt;
&lt;img src=&#34;https://misty-limit-424f.allison-00c.workers.dev/2025/01/fd5b406b8b07b21fbe4b9cca43660907.webp&#34; alt=&#34;Snipaste_2024-09-02_00-23-51.png|600&#34;&gt;
&lt;img src=&#34;https://misty-limit-424f.allison-00c.workers.dev/2025/01/707e168ad5f0d102ee2f46835f2ef205.webp&#34; alt=&#34;Snipaste_2024-09-02_00-24-46.png|600&#34;&gt;
&lt;img src=&#34;https://misty-limit-424f.allison-00c.workers.dev/2025/01/9e9dd5804826a4351eb02180922d6d27.webp&#34; alt=&#34;Snipaste_2024-09-02_00-25-30.png|600&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;我们为什么吃太多&#34;&gt;我们为什么吃（太多）&lt;/h3&gt;


&lt;p&gt;一本关于体重、饮食和健康的科普。作者是做胃切除的外科医生，接触过许多超重患者。这类型书最后结论都差不多——健康饮食、适量运动、多吃天然食品、保证睡眠以及精神健康、不要节食。&lt;/p&gt;
&lt;p&gt;但人的大脑（或者说，我的大脑）就是需要各种这样喋喋不休从原理出发的解释。&lt;/p&gt;
&lt;p&gt;书里提到的一些内容：&lt;/p&gt;
&lt;p&gt;基因和环境的影响，不仅仅是远古家族的基因，上一代甚至跨代的环境也会后天影响到孩子的体重水平——比如饥荒、战争等等。&lt;/p&gt;
&lt;p&gt;人的体重绝不仅仅是简单的摄入消耗加减算数，这是一个复杂的反馈和负反馈过程。身体无法区分自愿节食与食物饥荒，依靠节食手段减重只能让身体处于低代谢水平，注定会反弹。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;只要你饮食得当、避免零食、生活压力低，就没有必要数着卡路里过日子——你的体重定点自然会处在合理范围，新陈代谢也会令其保持健康水平。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不过书里还重点强调了 omega-3 和 omega-6 的区别，我总觉得这部分还无法完全说服我。作者的态度是我们需要多摄入 omega-3，尽量减少 omega-6。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;请记住，新鲜食物只能保存几天；而含有欧米伽-6脂肪酸的食物能保存好几个月。你能靠这个来区分它们。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;欧米伽-3脂肪酸源自绿叶植物（和海洋中的绿藻），以及以叶子、青草和海藻为食的各种动物和鱼类。要知道，有很多养殖场会以非天然的谷物为基础来喂养牲畜，其中含有欧米伽-6脂肪酸，这样能让它们长得更大更快（对动物和对人同样有效）。从这些养殖场出来的牲畜，肉质当中欧米伽-3的含量很低，而欧米伽-6的含量很高（跟人一样）。因此，如果有条件的话，也要避免吃这种养殖肉。糟糕的是，用谷物来饲养牲畜已经成了养殖场的常态，你将不得不十分谨慎地选取草饲动物的肉品。几乎所有的鸡肉和猪肉，以及大多数牛肉，都是谷饲的，所以你要试着避开这些肉品。大多数羊仍旧是在草地上放养，它们会是一个不错的选择。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而各类坚果在作者的观点里虽然 omega-3 含量不低但 omega-6 更高，并不是一个好的选择。另一个重灾区则是植物油，几乎所有植物油都含有过高 omega-6，作者的建议是使用橄榄油和黄油代替植物油烹饪。不过想想我日常也确实不怎么用油，而且有什么场景需要大量用油呢？肉类本身就有脂肪，鸡腿、牛肉、带皮的鱼，煎一煎就有油分析出了，根本没必要额外用油？之前我买了一升橄榄油，两年保质期结束居然还有 1/4 没用完，我可是一日三餐都几乎自己做的人！采纳这个建议对我几乎没有影响，就也试试看吧。&lt;/p&gt;
&lt;h3 id=&#34;万神殿堂&#34;&gt;万神殿堂&lt;/h3&gt;


&lt;p&gt;建筑史诗系列的第一本。&lt;/p&gt;
&lt;p&gt;用了大段笔墨介绍希腊时代的神庙建筑，再到罗马时期建筑技艺的发展，做够了铺陈，好比一串强光打到舞台中心，最后主角万神殿才浓墨重彩地登场。万神庙的前奏是希腊式的廊柱，主乐章则是罗马由混凝土拱券打造出的气势恢宏空间。这时罗马帝国还没有被基督教污染（嗯我的极其主观用词），万神庙造就的，是一个与自然、宇宙、光影、众神对话的场景。尤其是对神庙里光的描写，让我想起 &lt;a href=&#34;20230430_2#%E4%BA%B2%E7%88%B1%E7%9A%84%E8%80%81%E7%88%B1%E5%B0%94%E5%85%B0&#34;&gt;《亲爱的老爱尔兰》&lt;/a&gt; 里提到的诺斯石墓。对我来说，还是多神论、泛神论时代比较有趣，等到基督教时期，宗教场所全都修得高高在上，要把人辗入尘埃，只为信仰它那唯一的神。&lt;/p&gt;
&lt;h3 id=&#34;战斗吧蝗虫博士&#34;&gt;战斗吧，蝗虫博士&lt;/h3&gt;


&lt;p&gt;很生气，被简介和推广诈骗，阅读体验完全不符合预期，犹豫了一下是给两星还是三星，但看到豆瓣离谱的高分最后还是只打了两星。其实看文案我就应该警铃大作的，它居然拿《天真的人类学家》（插播之前的&lt;a href=&#34;20230228&#34;&gt;辱骂&lt;/a&gt;）做比，那还能有什么好！可惜我没能听从我的直觉。&lt;/p&gt;
&lt;p&gt;本以为会是像《远东冰原上的猫头鹰》（见 &lt;a href=&#34;2023_book_review&#34;&gt;2023_book_review&lt;/a&gt;）那样既有扎实的一手研究实录，又有当地风土人情介绍，结果呢，日本男博士这水准真是差得离谱。通篇所谓的“爆笑”全是恶俗两性笑话，什么要和蝗虫谈情说爱，来上一场艳遇，一亲芳泽，彻头彻尾的猥琐宅男形象。提到日本人对海滩的印象，他自然而然的表述是“日本人会觉得海边都是比基尼美女，但这里其实 balabala ”，我满头问号，呵，就直说是你自己的想象好了。&lt;/p&gt;
&lt;p&gt;不仅写得差，译得也差。我不知道编辑是怎么允许痛感、背刺、好大儿这种词出现在成书里的。译者也接了上百本日语书了，怎么是不知道痛感是日语词不是中文吗？整本书里出现了八百遍痛感吧，甚至还有“非常痛感”这样的表述，我真是白眼要翻到天上。这个译者译的另一本日本观鸟书籍也是错得一塌糊涂，还把 species 译成“品种”，简直离奇。是只想赶紧计件结束拉倒吗？&lt;/p&gt;
&lt;p&gt;打着在非洲治理蝗虫的噱头，关于蝗虫的研究却基本等于无，不会真有人觉得我看这书是为了看找不到工作的日本博士日常流水账吧？科普、生态哪怕自然描写都几乎没有，这么松泡敷衍的书是怎么在日本卖了二十万册的？作者倒是在后记写了，因为论文还没发表，所以书里不能讲研究内容。那你出什么书？简直荒谬。&lt;/p&gt;
&lt;h3 id=&#34;the-eyes-and-the-impossible&#34;&gt;The Eyes and the Impossible&lt;/h3&gt;


&lt;p&gt;扒拉 Libby 里可听的资源，因为本地图书馆只买了少儿库所以可挑的并不多。避开各式充满人类幼崽的卡通封面，这只看上去很神气的奔跑的狗狗抓住了我眼球，点开试阅看了眼，被这段前言吸引：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a work of fiction. No places are real places. No animals are real animals. And, most crucially, no animals symbolize people. It is a tendency of the human species to see themselves in everything, to assume all living things, animals in particular, are simply corollaries to humans, but in this book, that is not the case. Here, the dogs are dogs, the birds are birds, goats are goats, the Bison Bison.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ldquo;Here, the dogs are dogs, the birds are birds, goats are goats, the Bison Bison&amp;rdquo;，我的确也是受够了那些过于拟人化的动物故事。Audiobook 的朗读者非常厉害，各个角色的语气切换真是活灵活现。&lt;/p&gt;
&lt;p&gt;不过虽然作者说“dogs are dogs”，其实本质还是一个冒险故事。一个特立独行的主角，结识朋友，认识自我，经历告别，最后踏上新的旅程。&lt;/p&gt;
&lt;p&gt;老实说即使是儿童书籍我听的过程中还是不能完全抓住对话，名字更是完全没对上号，但朗读者的声线转换帮了大忙，全靠他的音色和语气变化来判断对话发生的对象。但听到一半我也成功猜出这只叫声是“ha ha hooooo”的狗狗究竟是什么（不过多剧透了），哈，多亏之前读另外几本北美动物书籍攒下的知识。&lt;/p&gt;
&lt;p&gt;整体来说还不错，但不算非常出彩，audiobook 加分不少，好像书里也有不少插图，想找点简单轻松内容读读（或者家里有小朋友）可以考虑一下这本。&lt;/p&gt;
&lt;h3 id=&#34;jellies--the-life-of-jellyfish&#34;&gt;Jellies : The Life of Jellyfish&lt;/h3&gt;


&lt;p&gt;翻本地文件发现这本，没想到这么薄，字还这么少！我不可置信地去 Goodreads 上确认了下真的就只有 30 来页。一些水母图片，配上名字和只有一句话的描述，没了。&lt;/p&gt;
&lt;p&gt;唯一有意思的就是这句：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Jellyfish are so simple that they look like plastic trash floating in the sea. When an animal eats a jellyfish it stays healthy and strong. When an animal eats plastic it gets weaker and weaker and eventually dies.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;生命进化的跃升&#34;&gt;生命进化的跃升&lt;/h3&gt;


&lt;p&gt;非常非常精彩的关于地球生命演化的论述。&lt;/p&gt;
&lt;p&gt;也可以说是 Nick Lane 书里最好读的一本，因为是抽取了十个作者认为最重要的演化史上的突变——让原始生命何以最终成为如今地球上繁盛的复杂多细胞集合体，因此每一章节都有明确主题和确定结果，且基本只涉及简单的原理，不至于像《复杂生命的起源》那样必须完全理解每一步骤的推演才能进入下一步。&lt;/p&gt;
&lt;p&gt;复杂生命的形成是一个偶然，错失任何一步可能都不会成为今天的我们。无论是氧气的利用、线粒体与单细胞生物的融合、眼睛的出现、性的繁衍、意识的产生乃至，最后的死亡，都是生命必须的过程。实在是精彩纷呈。&lt;/p&gt;
&lt;p&gt;这才是一流的科普写作，不是泛泛地展示现象，而是不停地引领读者提问、思考，不畏惧解释复杂问题，也愿意引入最前沿的理论（哪怕还在猜想阶段），尊重读者的智商和相信读者的好奇心。&lt;/p&gt;
&lt;p&gt;我喜欢这种信息量给够让我享受缜密的逻辑和有无限探索未知可能的书！当然，其实看这本已经是偷懒，因为另外几本比如《复杂生命的起源》、Oxygen（这本只有英文版我不自量力地听了下有声书听得两眼冒蚊香，只听懂了一串 oxygen 和 hrdrogen，至于那一串生化反应真真是天书……）等是纵向地深入，难度更大。&lt;/p&gt;
&lt;p&gt;此外作者时不时插播对上帝创世论的讽刺也是深得我心，阴阳怪气太好笑了！&lt;/p&gt;
&lt;p&gt;（还想写更多但算了，等把 Nick Lane 的书再多看几本集中写，希望我不是又在立 flag……）&lt;/p&gt;
&lt;h3 id=&#34;你所不知道的日本名词故事&#34;&gt;你所不知道的日本名词故事&lt;/h3&gt;


&lt;p&gt;因为我的日语学习停滞了，想着找点日语相关边角料读读也不错。这本就是一些零碎（无用）知识合集。&lt;/p&gt;
&lt;p&gt;而在诸多词语里让我心情非常复杂的是这段。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;江户时代（公元十七到十九世纪，一六〇三—一八六七）的日本人，曾把中国称为“南京”。从中国进口的舶来品，尤其是小巧玲珑的好东西，经常用“南京”一词儿来形容了，如：南京豆、南京米、南京锭（锁）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是啊，曾经的南京（ナンキン）被用来指代小巧玲珑的好东西，那南京大屠杀又怎么说呢？我不想清算什么，可我显然也不能把那当作没有发生。&lt;/p&gt;
&lt;h3 id=&#34;如何理解一只鸟&#34;&gt;如何理解一只鸟&lt;/h3&gt;


&lt;p&gt;没有很理解鸟，但是理解了为什么豆瓣短评会说这书好看又不好看。&lt;/p&gt;
&lt;p&gt;所有插图都非常美丽，但对于这个文本我的评价是，大概是博士生读博副产物吧。读了 100 篇论文后觉得不能浪费，于是给每篇写个百来字的综述再打上 tag，最后就归类成现在我看到的这个东西。散乱，零碎，无趣。尤其同时我在读《生命进化的跃升》，这落差实在太大了！当然，对每个科普作者用 Nick Lane 的标准来要求也是太苛刻，但是不需要讲解原理追本溯源，哪怕只论述最新发现也不是不能写得好看，What an Owl Knows、无敌蝇家、鱼什么都知道，都是这类的，人家怎么就能写得好？&lt;/p&gt;
&lt;p&gt;你要硬说我有没有学到什么，那必然多少也是有一点的，可如果我想读这么无趣的文字，我何不去看教科书？那起码还有个章节编排和全景式框架。这本书就像我用 obsidian 筛选了同类 tag 下的段落直接塞到一起，而吝啬用自己的大脑去寻找逻辑和隐形的骨架将其串联。&lt;/p&gt;
&lt;p&gt;最后，写读后感怎么会这么累（有气无力），感觉是在使劲搅和几个月前的我的脑子，我写得有点想吐……&lt;/p&gt;

</description>

</item>
        
    <item>
<title>我的博客写作流程</title>
<link>https://thewanderingallison.github.io/posts/my_blogging_workflow/</link>
<pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate>
      
      <guid>https://thewanderingallison.github.io/posts/my_blogging_workflow/</guid>
<description>
    &lt;h2 id=&#34;动机&#34;&gt;动机&lt;/h2&gt;
&lt;p&gt;过去在互联网上我一向话不算多，正因如此，极少数有强烈表达欲的时刻被豆瓣或者微博删帖、禁言才更让我生气。恰好那时转移到了长毛象，发现同时兴起了一股博客复兴潮。很久之前我在新浪有个博客，也始终是 RSS 的忠实使用者，读博客的习惯从未落下，真的写起来也就毫无困难。搭博客也比我以为的简单许多，2020 年底我在一行代码也不懂的情况下也顺利地用不到两天的时间借助 Hugo 和 GitHub Pages 让博客成功运行至今。&lt;/p&gt;
&lt;p&gt;但是为了保证打字的流畅，陆续地我加上了不少工具以避免额外劳动，这篇就是我常规的博客运作流程。&lt;/p&gt;
&lt;h2 id=&#34;灵感收集&#34;&gt;灵感收集&lt;/h2&gt;
&lt;p&gt;怎么写，写什么，每个人有不同的兴趣和表达方式，重要的是有想法就尽量及时保存。&lt;/p&gt;
&lt;p&gt;书桌上纸质笔记本，在不开电子设备（尤其看纸质书）时写。电脑，Obsidian。手机平板，Google Keep。出门行程较长时（长时间地铁或跨城高铁）会带随身手账本在路上记录。&lt;/p&gt;
&lt;h2 id=&#34;写作&#34;&gt;写作&lt;/h2&gt;
&lt;p&gt;录入都在电脑 Obsidian 里完成。&lt;/p&gt;
&lt;p&gt;大部分内容会打大纲，写得顺全程键盘，写得不顺就换纸笔，重新理提纲，闷头把能想到的全一股脑记下来，草稿写完再整理思路，删减、调整结构。偶尔在笔记本上会一口气倾倒十页八页的废话，最后电脑输入只用一半甚至三分之一。&lt;/p&gt;
&lt;p&gt;输入法是微软拼音（小鹤双拼），效率比全拼高多了！&lt;/p&gt;
&lt;h2 id=&#34;排版&#34;&gt;排版&lt;/h2&gt;
&lt;h3 id=&#34;文字&#34;&gt;文字&lt;/h3&gt;
&lt;p&gt;Metadata，用 Obsidian 的 template + 自定义快捷键自动插入。&lt;/p&gt;
&lt;p&gt;数字、中英文混排自动插入空格，标点符号自动补全，连续输入全角转半角等功能依靠 Obsidian 的 Easy Typing 插件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://misty-limit-424f.allison-00c.workers.dev/2025/01/59670324faffa947ee9f4c3934b0f3ad.webp&#34; alt=&#34;image.png|600&#34;&gt;&lt;/p&gt;
&lt;p&gt;讨厌一切打字之外的劳动，所以总是在找更无痛的编辑方式。非常依赖 obsidian 的各种 hotkey 以避免敲键盘时还得调格式或是分心挪鼠标。比如 Ctrl + K 插入 markdown 链接格式 &lt;code&gt;[]()&lt;/code&gt; ，Ctrl、shift、fn 和方向键的组合以选中不同文字等等。&lt;/p&gt;
&lt;h3 id=&#34;图片&#34;&gt;图片&lt;/h3&gt;
&lt;p&gt;用到的工具如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手机截图和照片：Google Photos&lt;/li&gt;
&lt;li&gt;电脑截图：Snipaste&lt;/li&gt;
&lt;li&gt;图床管理：PicList&lt;/li&gt;
&lt;li&gt;Obsidian 图片上传插件：Image auto upload&lt;/li&gt;
&lt;li&gt;Object storage：Backblaze&lt;/li&gt;
&lt;li&gt;Backblaze private bucket 转为公开及添加图片缓存： Cloudflare Worker&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;刚建博客时我用 GitHub 仓库当图床，靠的是 Picgo + Image auto upload 插件自动上传。因为觉得这不是一个长久之道且不太正当，最近把图片全都传到了 Backblaze 的 object storage，前置设置变得复杂了些，但逻辑还是一致的。&lt;/p&gt;
&lt;p&gt;这个流程是：&lt;/p&gt;
&lt;p&gt;打开 Google Photos（使用 Chrome 的 Install App 功能添加到桌面），Ctrl C。电脑上的截图则是 fn + f1 （snipaste 截图快捷键），Ctrl C。&lt;/p&gt;
&lt;p&gt;打开 Obsidian 文档， Ctrl V。如果有多张照片/截图，还可以先多次 Ctrl C，再使用 Win + V 打开系统 clipboard （如下图）多次粘贴。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://misty-limit-424f.allison-00c.workers.dev/2025/01/5adbfbfc24ca73891c46b47f27e34da4.webp&#34; alt=&#34;image.png|600&#34;&gt;&lt;/p&gt;
&lt;p&gt;执行粘贴动作后 Image atuo upload 插件自动调用 PicList，PicList 将图片重命名、去除 exif data、转格式为 webp 后上传至 Backblaze，返回 markdown 图片链接，像上图 Ctrl V 后最终呈现在 Obsidian 里的是 &lt;code&gt;![image.png|600](https://misty-limit-424f.allison-00c.workers.dev/2025/01/c73894ff0eebabc1c0eccfa07ebe5f4a.webp)&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;Cloudflare Worker 起的作用是通过 application key 访问 Backblaze 的 private bucket 将图片缓存并生成一个 Worker 链接使之公开可见。在 PicList 中设定自定义域名，也就是 Worker 地址，返回的是转义后的链接，避免个人 bucket 地址暴露，同时还利用 Cloudflare 的缓存减少对 Object Storage 的访问。唯一的问题是，国内 IP 看不到 Cloudflare 的图片，但这不是我能控制的了。&lt;/p&gt;
&lt;p&gt;实现过程颇为复杂，等我试验一段时间确认完全没问题会再写详细操作，但后续的维护很轻松，插入图片所有我进行的只是两个键盘动作，Ctrl C、Ctrl V 而已。&lt;/p&gt;
&lt;h2 id=&#34;审校&#34;&gt;审校&lt;/h2&gt;
&lt;p&gt;全部写完会在 Obsidian 里右击文档 tab 选择在默认 app 中打开，也就是 VS Code，利用 VS Code 的 markdown 插件修正格式，多余空格、空行等等，并且通读一遍检查错字、标点符号、病句之类。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://misty-limit-424f.allison-00c.workers.dev/2025/01/c73894ff0eebabc1c0eccfa07ebe5f4a.webp&#34; alt=&#34;image.png|600&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;发布&#34;&gt;发布&lt;/h2&gt;
&lt;p&gt;最后返回 Obsidian，快捷键移动文档到 post 文件夹，修改 draft 值为 false，再使用 git 插件一键 commit 和 sync。(隐藏的流程还有两个连环触发的 GitHub Action 但这实在是太长了此处略过。) 除非动了博客架构，比如改 CSS，添加 shortcode 之类，否则我不会在本地使用 &lt;code&gt;Hugo&lt;/code&gt; 以及 &lt;code&gt;Hugo server&lt;/code&gt;，嗯就是这么怕麻烦。&lt;/p&gt;
&lt;p&gt;关联阅读：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;


  

&lt;a href=&#34;https://thewanderingallison.github.io/posts/obsidian_plugins&#34; &gt;我的 Obsidian 常用插件&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;


  

&lt;a href=&#34;https://thewanderingallison.github.io/posts/syncing_specific_folders_between_different_repositories&#34; &gt;Syncing Specific Folders Between Different Repositories Using GitHub Actions&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;


  

&lt;a href=&#34;https://thewanderingallison.github.io/posts/blog_setting&#34; &gt;一个非技术流的blog建站流程&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>

</item>
        
    <item>
<title>“我没说过”</title>
<link>https://thewanderingallison.github.io/posts/i_never_said_that/</link>
<pubDate>Mon, 06 Jan 2025 00:00:00 +0000</pubDate>
      
      <guid>https://thewanderingallison.github.io/posts/i_never_said_that/</guid>
<description>
    &lt;p&gt;一篇不在计划内的更新，关于一件颇为令人尴尬的事实。&lt;/p&gt;
&lt;p&gt;博客主题的 &lt;code&gt;config.toml&lt;/code&gt; 文件里有个  &lt;code&gt;params&lt;/code&gt; 是 &lt;code&gt;intro&lt;/code&gt;，建站那会儿恰好在某篇文章里读到这句话，据说引自波伏瓦：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我厌倦了贞洁又郁闷的日子，又没有勇气过堕落的生活。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然会让人误解，但这种逃离乏味庸常生活的渴望恰好合了我的心意，就一直放在了首页上。&lt;/p&gt;
&lt;p&gt;最近突然又想起来这件事，发现我从来没有确认过来源。试图在网上查找出处，全是二手引用，宣称“波伏瓦曾说过”，却无一给出具体的书名或文章名。&lt;/p&gt;
&lt;p&gt;虽然我日常惯例是辱骂微信读书也不得不说这时它的搜索功能非常有用，可以在全站图书里查询特定内容。搜出三本和波伏瓦完全无关的书，全以“波伏瓦说过”开头，接着一字不差地引用了这句话。&lt;/p&gt;
&lt;p&gt;换个思路，逐本排查波伏娃的书，说不定是译文不同所导致的语句差别？关键词“贞洁”、“厌倦”或者“堕落”总该不会有错把。而微信读书上架的所有波伏瓦的书，甚至包括她的访谈录和传记，用这三个词分别全文查找，都找不到类似的表述。&lt;/p&gt;
&lt;p&gt;我又把这句话翻成英文和法语发给 ChatGPT，问它能否找到波伏瓦的任何原文有相似表达，很遗憾，AI 说可能是波伏瓦的话——这种关于性、苦闷之类的话题，但它找不到任何直接证据。&lt;/p&gt;
&lt;p&gt;好吧，再来从中文入手。撇除一堆乱七八糟的网站文章，豆瓣上有篇读书笔记原文引用了这句话，2001 年出版的柴静的《用我一辈子去忘记》，第 80 页：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们在宿舍齐声念西蒙波娃的句子“我厌倦了贞洁又郁闷的日子，又没有勇气过堕落的生活。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2001 年？我再试着限定 Google 的搜索结果时间，2001 年之前中文互联网一条关于这个句子的内容都没有。再放宽到十年后，2011 年，只有两条结果，2007 年 4 月的


&lt;a href=&#34;https://www.cctv.com/anchor/compere/0148/20070402/15.shtml&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;央视网&lt;/a&gt;
，再就是 2007 年 2 月的这个短文学。央视网上的柴静文章内容和豆瓣读书里的原文摘抄也对上了，始作俑者难道就是柴静？之后这句所谓名言就大量出现。不过，央视网这个网站是多少年没维护过了？还停留在十几年前的画风。甚至——柴静在中国算是被封杀的状态了吧，央视网的主持人专栏也没把她撤下来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://misty-limit-424f.allison-00c.workers.dev/2025/01/8845dcf9e23087648bfc0ebbd76235ed.webp&#34; alt=&#34;image.png|300&#34;&gt;&lt;/p&gt;
&lt;p&gt;所以，这个“波伏瓦名言”，大概率是他人捏造，真是尴尬，迅速把首页 intro 改掉，庆幸至少最初我没在下面注明人名，否则就更尴尬了……&lt;/p&gt;
&lt;p&gt;不是给自己找补，但大部分时候我会更严谨地对待这种“某某名人说”。比如刘慈欣在三体里引用的那句“给岁月以文明，而不是给文明以岁月”，顺便又被无数其他小说再次引用，并冠之“帕斯卡说”，但搜遍全网也找不到帕斯卡说的这句话！之前我还很认真地给小说作者评论，问她具体出处是哪里（嗯是的，其实是在某篇 BL 小说里读到的），可惜作者完全没理我。稍后我也读了三体，于是顿悟，是这种二手引用来着呀。&lt;/p&gt;
&lt;p&gt;顺带搜索了下还有哪些“我没说过”，发现了这篇文章， 


&lt;a href=&#34;https://www.ripleys.com/stories/greatest-misquotes-in-history&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;The Greatest Misquotes in History&lt;/a&gt;
，那个可比“何不食肉糜”的法国玛丽王后的 &amp;ldquo;Let Them Eat Cake!&amp;rdquo; 也是杜撰呢。&lt;/p&gt;
&lt;p&gt;以及，最开始很想插鲁迅表情包——就是那个“我没说过这句话”，但发现我还是不喜欢用任何真人表情包，试着让 AI 给我生成了个类似的 I NEVER SAID THAT meme，可惜 AI 图片质感就是很差啊！没办法忍受插这种图到文章里，请自行脑补吧！&lt;/p&gt;

</description>

</item>
    
  </channel>
</rss>
